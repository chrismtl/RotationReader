
AVRASM ver. 2.2.8  C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm Wed Jun 01 01:33:47 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(124): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\macros.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(125): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\definitions.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(126): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\encoder.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\encoder.asm(7): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\variables.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(129): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\distance.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(226): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\graph.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\graph.asm(8): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\led_macros.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(232): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\ws2812b_4MHz.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(233): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\lcd.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(234): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\printf.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(124): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\macros.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(125): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\definitions.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(126): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\encoder.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\encoder.asm(7): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\variables.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(129): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\distance.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(226): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\graph.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\graph.asm(8): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\led_macros.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(232): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\ws2812b_4MHz.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(233): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\lcd.asm'
C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\main.asm(234): Including file 'C:\Users\Christian SK M\Documents\Christian\EPFL\BA4\Microcontrolleurs\5-Projet\Projet\Projet\printf.asm'
                                 
                                   ; file	main.asm   target ATmega128L-4MHz-STK300
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; purpose project main file
                                 ; usage: buttons on PORTC, ws2812 on PORTD (bit 1)
                                 ; 20220315 AxS
                                 
                                 ; === definitions ===
                                 .equ	REFRESH_RATE = 93	; address LCD data register
                                 .equ	PRESCALER	= 5
                                 
                                 .cseg
                                 .org 0
000000 940c 00df                 	jmp	reset
                                 
                                 .org INT0addr
000002 940c 0030                 	jmp int0_sri
                                 
                                 .org INT1addr
000004 940c 0034                 	jmp int1_sri
                                 
                                 .org INT2addr
000006 940c 0038                 	jmp int2_sri 
                                 
                                 .org INT3addr
000008 940c 003c                 	jmp int3_sri 
                                 
                                 .org OVF0addr
000020 940c 0042                 	jmp tim0_ovf
                                 
                                 .org ADCCaddr
00002a 940c 0040                 	jmp ADCCaddr_sra
                                 .org 0x30
                                 
                                 ; ========interrupt service routines======
                                 int0_sri:
000030 e010                      	ldi _w, 0
000031 9310 010a                 	sts mode, _w
000033 9518                      	reti
                                 
                                 int1_sri:
000034 e011                      	ldi _w, 1
000035 9310 010a                 	sts mode, _w
000037 9518                      	reti
                                 
                                 int2_sri:
000038 e011                      	ldi _w, 1
000039 9310 0110                 	sts break_menu_loop, _w
00003b 9518                      	reti
                                 
                                 int3_sri:
00003c e011                      	ldi _w, 1
00003d 9310 010b                 	sts change_mode, _w
00003f 9518                      	reti
                                 
                                 ADCCaddr_sra:
000040 e071                      	ldi 	r23, 0x01		; set the flag
000041 9518                      	reti
                                 
                                 tim0_ovf:
000042 b61f                      	in _sreg, SREG
000043 9360 0102                 	sts b0_temp, b0		;save b0 in temp
                                 	;push every line to the left
000045 9110 012b                 	lds _w, h22
000047 9310 012c                 	sts h23, _w
000049 9110 012a                 	lds _w, h21
00004b 9310 012b                 	sts h22, _w
00004d 9110 0129                 	lds _w, h20
00004f 9310 012a                 	sts h21, _w
000051 9110 0128                 	lds _w, h19
000053 9310 0129                 	sts h20, _w
000055 9110 0127                 	lds _w, h18
000057 9310 0128                 	sts h19, _w
000059 9110 0126                 	lds _w, h17
00005b 9310 0127                 	sts h18, _w
00005d 9110 0125                 	lds _w, h16
00005f 9310 0126                 	sts h17, _w
000061 9110 0124                 	lds _w, h15
000063 9310 0125                 	sts h16, _w
000065 9110 0123                 	lds _w, h14
000067 9310 0124                 	sts h15, _w
000069 9110 0122                 	lds _w, h13
00006b 9310 0123                 	sts h14, _w
00006d 9110 0121                 	lds _w, h12
00006f 9310 0122                 	sts h13, _w
000071 9110 0120                 	lds _w, h11
000073 9310 0121                 	sts h12, _w
000075 9110 011f                 	lds _w, h10
000077 9310 0120                 	sts h11, _w
000079 9110 011e                 	lds _w, h9
00007b 9310 011f                 	sts h10, _w
00007d 9110 011d                 	lds _w, h8
00007f 9310 011e                 	sts h9, _w
                                 	
                                 	;store last frequency
000081 9110 0108                 	lds _w, frequency
000083 9310 0109                 	sts last_frequency, _w
                                 
                                 	;store frequency
000085 9110 0107                 	lds _w, counter		;filter counter if >6
000087 3017                      	cpi _w, 7
000088 f008                      	brlo PC+2
000089 e016                      	ldi _w, 6
00008a 9310 0108                 	sts frequency, _w
                                 	
00008c 9160 010a                 	lds b0, mode
00008e ff60                      	sbrs b0, 0	
00008f c003                      	rjmp store	;speed mode:		store frequency
                                 
000090 9160 0109                 	lds b0, last_frequency
000092 1b16                      	sub _w, b0				;acceleration mode: store frequency - last frequency
                                 
                                 	store:
000093 9310 011d                 	sts h8, _w
                                 
                                 	;reset counter
000095 2711                      	clr _w
000096 9310 0107                 	sts counter, _w
                                 
000098 9160 0102                 	lds b0, b0_temp		;restore b0
00009a be1f                      	out SREG, _sreg
00009b 9518                      	reti
                                 
                                 ;============= INCLUDE FILES =============
                                 ;Librairies
                                 .include "macros.asm"		; include macro definitions
                                 
                                 ; purpose library, general-purpose macros
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 ; v2019.01 20180820 AxS
                                 
                                 ; ==============
                                 ; 	pointers
                                 ; ==============
                                 
                                 ;=============MY MACROS=============================
                                 .macro CLEAR_A
                                 	clr a0
                                 	clr a1
                                 	clr a2
                                 	clr a3
                                 .endmacro
                                 
                                 .macro CLEAR_B
                                 	clr b0
                                 	clr b1
                                 	clr b2
                                 	clr b3
                                 .endmacro
                                 ;===================================================
                                 
                                 ; --- loading an immediate into a pointer XYZ,SP ---
                                 .macro 	LDIX	; sram
                                 	ldi	xl, low(@0)
                                 	ldi	xh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIY	; sram	
                                 	ldi	yl, low(@0)
                                 	ldi	yh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIZ	; sram
                                 	ldi	zl, low(@0)
                                 	ldi	zh,high(@0)
                                 	
                                 	.endmacro
                                 .macro	LDZD	; sram, reg	; sram+reg -> Z
                                 	mov	zl,@1
                                 	clr	zh
                                 	subi	zl, low(-@0)
                                 	sbci	zh,high(-@0)
                                 	.endmacro
                                 .macro	LDSP	; sram
                                 	ldi	r16, low(@0)
                                 	out	spl,r16
                                 	ldi	r16,high(@0)
                                 	out	sph,r16
                                 	.endmacro
                                 
                                 ; --- load/store SRAM addr into pointer XYZ ---	
                                 .macro 	LDSX	; sram
                                 	lds	xl,@0
                                 	lds	xh,@0+1
                                 	.endmacro
                                 .macro 	LDSY	; sram
                                 	lds	yl,@0
                                 	lds	yh,@0+1
                                 	.endmacro
                                 .macro 	LDSZ	; sram
                                 	lds	zl,@0
                                 	lds	zh,@0+1
                                 	.endmacro
                                 .macro 	STSX	; sram
                                 	sts	@0,  xl
                                 	sts	@0+1,xh
                                 	.endmacro	
                                 .macro 	STSY	; sram
                                 	sts	@0,  yl
                                 	sts	@0+1,yh
                                 	.endmacro
                                 .macro 	STSZ	; sram
                                 	sts	@0,  zl
                                 	sts	@0+1,zh
                                 	.endmacro	
                                 
                                 ; --- push/pop pointer XYZ ---
                                 .macro	PUSHX			; push X
                                 	push	xl
                                 	push	xh
                                 	.endmacro
                                 .macro	POPX			; pop X
                                 	pop	xh
                                 	pop	xl
                                 	.endmacro
                                 	
                                 .macro	PUSHY			; push Y
                                 	push	yl
                                 	push	yh
                                 	.endmacro
                                 .macro	POPY			; pop Y
                                 	pop	yh
                                 	pop	yl
                                 	.endmacro
                                 
                                 .macro	PUSHZ			; push Z
                                 	push	zl
                                 	push	zh
                                 	.endmacro
                                 .macro	POPZ			; pop Z
                                 	pop	zh
                                 	pop	zl
                                 	.endmacro
                                 
                                 ; --- multiply/divide Z ---	
                                 .macro	MUL2Z			; multiply Z by 2
                                 	lsl	zl
                                 	rol	zh
                                 	.endmacro
                                 .macro	DIV2Z			; divide Z by 2
                                 	lsr	zh
                                 	ror	zl
                                 	.endmacro
                                 
                                 ; --- add register to pointer XYZ ---	
                                 .macro	ADDX	;reg		; x <- y+reg
                                 	add	xl,@0
                                 	brcc	PC+2
                                 	subi	xh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDY	;reg		; y <- y+reg
                                 	add	yl,@0
                                 	brcc	PC+2
                                 	subi	yh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDZ	;reg		; z <- z+reg
                                 	add	zl,@0
                                 	brcc	PC+2
                                 	subi	zh,-1		; add carry
                                 	.endmacro
                                 
                                 ; ===================
                                 ; 	miscellaneous
                                 ; ===================
                                 
                                 ; --- output/store (regular I/O space) immediate value ---
                                 .macro	OUTI	; port,k	output immediate value to port
                                 	ldi	w,@1
                                 	out	@0,w
                                 	.endmacro
                                 
                                 ; --- output/store (extended I/O space) immediate value ---
                                 .macro OUTEI	; port,k    output immediate value to port
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 ; --- add immediate value ---
                                 .macro	ADDI
                                 	subi	@0,-@1
                                 	.endmacro
                                 .macro	ADCI
                                 	sbci	@0,-@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with range limitation ---
                                 .macro	INC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	brlo	PC+3
                                 	ldi	@0,@1	
                                 	rjmp	PC+2
                                 	inc	@0
                                 	.endmacro
                                 
                                 .macro	DEC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@0
                                 	rjmp	PC+2
                                 	ldi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with cyclic range ---
                                 .macro	INC_CYC	; reg,low,high
                                 	cpi	@0,@2
                                 	brsh	_low	; reg>=high then reg=low
                                 	cpi	@0,@1
                                 	brlo	_low	; reg< low  then reg=low
                                 	inc	@0
                                 	rjmp	_done
                                 _low:	ldi	@0,@1
                                 _done:	
                                     .endmacro
                                 	
                                 .macro	DEC_CYC	; reg,low,high
                                 	cpi	@0,@1
                                 	breq	_high	; reg=low then reg=high
                                 	brlo	_high	; reg<low then reg=high
                                 	dec	@0	
                                 	cpi	@0,@2
                                 	brsh	_high	; reg>=high then high
                                 	rjmp	_done
                                 _high:	ldi	@0,@2
                                 _done:	
                                 	.endmacro
                                 
                                 .macro	INCDEC	;port,b1,b2,reg,low,high
                                 	sbic	@0,@1
                                 	rjmp	PC+6
                                 
                                 	cpi	@3,@5
                                 	brlo	PC+3
                                 	ldi	@3,@4	
                                 	rjmp	PC+2
                                 	inc	@3
                                 
                                 	sbic	@0,@2
                                 	rjmp	PC+7
                                 	
                                 	cpi	@3,@4
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@3
                                 	rjmp	PC+2
                                 	ldi	@3,@5
                                 	.endmacro		
                                 
                                 ; --- wait loops ---
                                 ; wait 10...196608 cycles
                                 .macro	WAIT_C	; k
                                 	ldi	w,  low((@0-7)/3)
                                 	mov	u,w			; u=LSB
                                 	ldi	w,high((@0-7)/3)+1	; w=MSB
                                 	dec	u
                                 	brne	PC-1
                                 	dec	u
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait micro-seconds (us)
                                 ; us = x*3*1000'000/clock)	==> x=us*clock/3000'000
                                 .macro	WAIT_US ; k
                                 	ldi	w, low((clock/1000*@0/3000)-1)
                                 	mov	u,w
                                 	ldi	w,high((clock/1000*@0/3000)-1)+1 ; set up: 3 cyles
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait mili-seconds (ms)
                                 .macro	WAIT_MS ; k
                                 	ldi	w, low(@0)
                                 	mov	u,w		; u = LSB	
                                 	ldi	w,high(@0)+1	; w = MSB
                                 wait_ms:
                                 	push	w		; wait 1000 usec
                                 	push	u
                                 	ldi	w, low((clock/3000)-5)	
                                 	mov	u,w
                                 	ldi	w,high((clock/3000)-5)+1
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	pop	u
                                 	pop	w
                                 	
                                 	dec	u
                                 	brne	wait_ms
                                 	dec	w
                                 	brne	wait_ms
                                 	.endmacro
                                 
                                 ; --- conditional jumps/calls ---
                                 .macro	JC0			; jump if carry=0
                                 	brcs	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JC1			; jump if carry=1
                                 	brcc	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 .macro	JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	breq	@2
                                 	.endmacro
                                 .macro	_JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rjmp	@2
                                 	.endmacro	
                                 .macro	JNK	; reg,k,addr	; jump if not(reg=k)
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro 
                                 
                                 .macro	CK	; reg,k,addr	; call if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CNK	; reg,k,addr	; call if not(reg=k)
                                 	cpi	@0,@1
                                 	breq	PC+2
                                 	rcall	@2
                                 	.endmacro 
                                 
                                 .macro	JSK	; sram,k,addr	; jump if sram=k
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	breq	@2
                                 	.endmacro 
                                 .macro	JSNK	; sram,k,addr	; jump if not(sram=k)
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- loops ---
                                 .macro	DJNZ	; reg,addr	; decr and jump if not zero
                                 	dec	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	DJNK	; reg,k,addr	; decr and jump if not k
                                 	dec	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	IJNZ	; reg,addr	; inc and jump if not zero
                                 	inc	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	breq	PC+2	
                                 	rjmp	@2
                                 	.endmacro
                                 
                                 .macro	DSJNK	; sram,k,addr	; dec sram and jump if not k
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- table lookup ---
                                 .macro	LOOKUP	;reg, index,tbl
                                 	push	ZL
                                 	push	ZH
                                 	mov	zl,@1		; move index into z
                                 	clr	zh
                                 	subi	zl, low(-2*@2)	; add base address of table
                                 	sbci	zh,high(-2*@2)	
                                 	lpm			; load program memory (into r0)
                                 	mov	@0,r0
                                 	pop	ZH
                                 	pop	ZL
                                 	.endmacro
                                 
                                 .macro	LOOKUP2	;r1,r0, index,tbl
                                 	mov	zl,@2		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	subi	zl, low(-2*@3)	; add base address of table
                                 	sbci	zh,high(-2*@3)
                                 	lpm			; get LSB byte
                                 	mov	w,r0		; temporary store LSB in w
                                 	adiw	zl,1		; increment Z
                                 	lpm			; get MSB byte
                                 	mov	@0,r0		; mov MSB to res1
                                 	mov	@1,w		; mov LSB to res0
                                 	.endmacro
                                 
                                 .macro	LOOKUP4	;r3,r2,r1,r0, index,tbl
                                 	mov	zl,@4		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh	
                                 	subi	zl, low(-2*@5)	; add base address of table
                                 	sbci	zh,high(-2*@5)
                                 	lpm
                                 	mov	@1,r0		; load high word LSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0		; load high word MSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@3,r0		; load low word LSB		
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0		; load low word MSB
                                 	.endmacro
                                 
                                 .macro	LOOKDOWN ;reg,index,tbl
                                 	ldi	ZL, low(2*@2)	; load table address
                                 	ldi	ZH,high(2*@2)
                                 	clr	@1
                                 loop:	lpm
                                 	cp	r0,@0
                                 	breq	found
                                 	inc	@1
                                 	adiw	ZL,1
                                 	tst	r0
                                 	breq	notfound
                                 	rjmp	loop
                                 notfound:
                                 	ldi	@1,-1
                                 found:	
                                 	.endmacro
                                 
                                 ; --- branch table ---
                                 .macro	C_TBL	; reg,tbl
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl
                                 	icall
                                 	.endmacro
                                 .macro	J_TBL	; reg,tbl	
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl	
                                 	ijmp
                                 	.endmacro
                                 
                                 .macro	BRANCH	; reg		; branching using the stack
                                 	ldi	w, low(tbl)
                                 	add	w,@0
                                 	push	w
                                 	ldi	w,high(tbl)
                                 	brcc	PC+2
                                 	inc	w
                                 	push	w
                                 	ret
                                 tbl:
                                 	.endmacro	
                                 
                                 ; --- multiply/division ---
                                 .macro	DIV2	; reg
                                 	lsr	@0
                                 	.endmacro
                                 .macro	DIV4	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro	
                                 .macro	DIV8	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro
                                 	
                                 .macro	MUL2	; reg
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL4	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL8	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 
                                 ; ====================================
                                 ; 	extending existing instructios
                                 ; ====================================
                                 
                                 ; --- immediate ops with r0..r15 ---
                                 .macro	_ADDI
                                 	ldi	w,@1
                                 	add	@0,w
                                 	.endmacro
                                 .macro	_ADCI
                                 	ldi	w,@1
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	_SUBI
                                 	ldi	w,@1
                                 	sub	@0,w
                                 	.endmacro
                                 .macro	_SBCI
                                 	ldi	w,@1
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	_ANDI
                                 	ldi	w,@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_ORI
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_EORI
                                 	ldi	w,@1
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	_SBR
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_CBR
                                 	ldi	w,~@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_CPI
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	.endmacro
                                 .macro	_LDI
                                 	ldi	w,@1
                                 	mov	@0,w
                                 	.endmacro
                                 
                                 ; --- bit access for port p32..p63 ---
                                 .macro	_SBI
                                 	in	w,@0
                                 	ori	w,1<<@1
                                 	out	@0,w
                                 	.endmacro
                                 .macro	_CBI
                                 	in	w,@0
                                 	andi	w,~(1<<@1)
                                 	out	@0,w
                                 	.endmacro
                                 	
                                 ; --- extending branch distance to +/-2k ---
                                 .macro	_BREQ
                                 	brne	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRNE
                                 	breq	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCS
                                 	brcc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCC
                                 	brcs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRSH
                                 	brlo	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLO
                                 	brsh	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRMI
                                 	brpl	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRPL
                                 	brmi	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRGE
                                 	brlt	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLT
                                 	brge	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHS
                                 	brhc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHC
                                 	brhs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTS
                                 	brtc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTC
                                 	brts	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVS
                                 	brvc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVC
                                 	brvs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRIE
                                 	brid	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRID
                                 	brie	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 ; ====================
                                 ; 	bit operations
                                 ; ====================
                                 
                                 ; --- moving bits ---
                                 .macro	MOVB	; reg1,b1, reg2,b2	; reg1,bit1 <- reg2,bit2
                                 	bst	@2,@3
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	OUTB	; port1,b1, reg2,b2	; port1,bit1 <- reg2,bit2
                                 	sbrs	@2,@3
                                 	cbi	@0,@1
                                 	sbrc	@2,@3
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INB	; reg1,b1, port2,b2	; reg1,bit1 <- port2,bit2
                                 	sbis	@2,@3
                                 	cbr	@0,1<<@1
                                 	sbic	@2,@3
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 
                                 .macro	Z2C				; zero to carry
                                 	sec
                                 	breq	PC+2	; (Z=1)
                                 	clc
                                 	.endmacro
                                 .macro	Z2INVC				; zero to inverse carry
                                 	sec
                                 	brne	PC+2	; (Z=0)
                                 	clc
                                 	.endmacro
                                 
                                 .macro	C2Z				; carry to zero
                                 	sez
                                 	brcs	PC+2	; (C=1)
                                 	clz
                                 	.endmacro
                                 
                                 .macro	B2C	; reg,b			; bit to carry
                                 	sbrc	@0,@1
                                 	sec
                                 	sbrs	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2B	; reg,b			; carry to bit
                                 	brcc	PC+2
                                 	sbr	@0,(1<<@1)
                                 	brcs	PC+2
                                 	cbr	@0,(1<<@1)
                                 	.endmacro
                                 .macro	P2C	; port,b		; port to carry
                                 	sbic	@0,@1
                                 	sec
                                 	sbis	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2P	; port,b		; carry to port
                                 	brcc	PC+2
                                 	sbi	@0,@1
                                 	brcs	PC+2
                                 	cbi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inverting bits ---
                                 .macro	INVB	; reg,bit		; inverse reg,bit
                                 	ldi	w,(1<<@1)
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	INVP	; port,bit		; inverse port,bit	
                                 	sbis	@0,@1
                                 	rjmp	PC+3
                                 	cbi	@0,@1
                                 	rjmp	PC+2
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INVC				; inverse carry	
                                 	brcs	PC+3
                                 	sec
                                 	rjmp	PC+2
                                 	clc
                                 	.endmacro
                                 
                                 ; --- setting a single bit ---
                                 .macro	SETBIT	; reg(0..7)
                                 ; in	reg (0..7)
                                 ; out	reg with bit (0..7) set to 1.
                                 ; 0=00000001
                                 ; 1=00000010
                                 ; ...
                                 ; 7=10000000
                                 	mov	w,@0
                                 	clr	@0
                                 	inc	@0
                                 	andi	w,0b111	
                                 	breq	PC+4
                                 	lsl	@0
                                 	dec	w
                                 	brne	PC-2
                                 	.endmacro
                                 
                                 ; --- logical operations with masks ---
                                 .macro	MOVMSK	; reg1,reg2,mask	; reg1 <- reg2 (mask)
                                 	ldi	w,~@2	
                                 	and	@0,w
                                 	ldi	w,@2
                                 	and	@1,w	
                                 	or	@0,@1
                                 	.endmacro	
                                 .macro	ANDMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	ori	w,~@2
                                 	and	@0,w
                                 	.endmacro	
                                 .macro	ORMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	andi	w,@2
                                 	or	@0,w
                                 	.endmacro
                                 	
                                 ; --- logical operations on bits ---
                                 .macro	ANDB	; r1,b1, r2,b2, r3,b3	; reg1,b1 <- reg2,b2 AND reg3,b3
                                 	set
                                 	sbrs	@4,@5	
                                 	clt
                                 	sbrs	@2,@3	
                                 	clt
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	ORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 OR reg3.b3
                                 	clt
                                 	sbrc	@4,@5	
                                 	set
                                 	sbrc	@2,@3	
                                 	set
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	EORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 XOR reg3.b3
                                 	sbrc	@4,@5
                                 	rjmp	f1
                                 f0:	bst	@2,@3	
                                 	rjmp	PC+4
                                 f1:	set
                                 	sbrc	@0,@1
                                 	clt
                                 	bld	@0,@0	
                                 	.endmacro
                                 	
                                 ; --- operations based on register bits ---
                                 .macro	FB0	; reg,bit		; bit=0
                                 	cbr	@0,1<<@1
                                 	.endmacro
                                 .macro	FB1	; reg,bit		; bit=1
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 .macro	_FB0	; reg,bit		; bit=0
                                 	ldi	w,~(1<<@1)
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_FB1	; reg,bit		; bit=1
                                 	ldi	w,1<<@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	SB0	; reg,bit,addr		; skip if bit=0
                                 	sbrc	@0,@1
                                 	.endmacro
                                 .macro	SB1	; reg,bit,addr		; skip if bit=1
                                 	sbrs	@0,@1
                                 	.endmacro
                                 .macro	JB0	; reg,bit,addr		; jump if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JB1	; reg,bit,addr		; jump if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CB0	; reg,bit,addr		; call if bit=0
                                 	sbrs	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CB1	; reg,bit,addr		; call if bit=1
                                 	sbrc	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	WB0	; reg,bit		; wait if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WB1	; reg,bit		; wait if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RB0	; reg,bit		; return if bit=0
                                 	sbrs	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RB1	; reg,bit		; return if bit=1
                                 	sbrc	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if bit=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WB0T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrs	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if bit=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WB1T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrc	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 	
                                 ; --- operations based on port bits ---
                                 .macro	P0	; port,bit		; port=0
                                 	cbi	@0,@1
                                 	.endmacro
                                 .macro	P1	; port,bit		; port=1
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	SP0	; port,bit		; skip if port=0
                                 	sbic	@0,@1
                                 	.endmacro
                                 .macro	SP1	; port,bit		; skip if port=1
                                 	sbis	@0,@1
                                 	.endmacro
                                 .macro	JP0	; port,bit,addr		; jump if port=0
                                 	sbis	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JP1	; port,bit,addr		; jump if port=1
                                 	sbic	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CP0	; port,bit,addr		; call if port=0
                                 	sbis	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CP1	; port,bit,addr		; call if port=1
                                 	sbic	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	WP0	; port,bit		; wait if port=0
                                 	sbis	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WP1	; port,bit		; wait if port=1
                                 	sbic	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RP0	; port,bit		; return if port=0
                                 	sbis	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RP1	; port,bit		; return if port=1
                                 	sbic	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if port=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WP0T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbis	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if port=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WP1T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbic	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 
                                 ; ===========================
                                 ; 	multi-byte operations
                                 ; ===========================
                                 
                                 .macro	SWAP4			; swap 2 variables
                                 	mov	w ,@0
                                 	mov	@0,@4
                                 	mov	@4,w
                                 	mov	w ,@1
                                 	mov	@1,@5
                                 	mov	@5,w
                                 	mov	w ,@2
                                 	mov	@2,@6
                                 	mov	@6,w
                                 	mov	w ,@3
                                 	mov	@3,@7
                                 	mov	@7,w
                                 	.endmacro
                                 .macro	SWAP3
                                 	mov	w ,@0
                                 	mov	@0,@3
                                 	mov	@3,w
                                 	mov	w ,@1
                                 	mov	@1,@4
                                 	mov	@4,w
                                 	mov	w ,@2
                                 	mov	@2,@5
                                 	mov	@5,w
                                 	.endmacro
                                 .macro	SWAP2
                                 	mov	w ,@0
                                 	mov	@0,@2
                                 	mov	@2,w
                                 	mov	w ,@1
                                 	mov	@1,@3
                                 	mov	@3,w
                                 	.endmacro
                                 .macro	SWAP1
                                 	mov	w ,@0
                                 	mov	@0,@1
                                 	mov	@1,w
                                 	.endmacro
                                 
                                 .macro	LDX4	;r..r0		; load from (x+)
                                 	ld	@3,x+
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX3	;r..r0
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX2	;r..r0	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 	
                                 .macro	LDY4	;r..r0		; load from (y+)
                                 	ld	@3,y+
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY3	;r..r0
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY2	;r..r0	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 
                                 .macro	LDZ4	;r..r0		; load from (z+)
                                 	ld	@3,z+
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ3	;r..r0
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ2	;r..r0
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 
                                 .macro	STX4	;r..r0		; store to (x+)
                                 	st	x+,@3
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX3	;r..r0
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX2	;r..r0
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 	
                                 .macro	STY4	;r..r0		; store to (y+)
                                 	st	y+,@3
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY3	;r..r0
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY2	;r..r0	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 	
                                 .macro	STZ4	;r..r0		; store to (z+)
                                 	st	z+,@3
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ3	;r..r0
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ2	;r..r0	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 	
                                 .macro	STI4	;addr,k		; store immediate
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	ldi	w,byte4(@1)
                                 	sts	@0+3,w	
                                 	.endmacro	
                                 .macro	STI3	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	.endmacro	
                                 .macro	STI2	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	STI	;addr,k
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	INC4			; increment
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC3
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC2
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 
                                 .macro	DEC4			; decrement
                                 	ldi	w,0xff
                                 	add	@3,w
                                 	adc	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC3
                                 	ldi	w,0xff
                                 	add	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC2
                                 	ldi	w,0xff
                                 	add	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 
                                 .macro	CLR9			; clear (also clears the carry)
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	clr	@8
                                 	.endmacro
                                 .macro	CLR8
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	.endmacro
                                 .macro	CLR7
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	.endmacro
                                 .macro	CLR6
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	.endmacro
                                 .macro	CLR5
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	.endmacro
                                 .macro	CLR4
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	.endmacro
                                 .macro	CLR3
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	.endmacro
                                 .macro	CLR2
                                 	sub	@0,@0
                                 	clr	@1
                                 	.endmacro
                                 
                                 .macro	COM4			; one's complement
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	.endmacro
                                 .macro	COM3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	.endmacro
                                 .macro	COM2
                                 	com	@0
                                 	com	@1
                                 	.endmacro
                                 
                                 .macro	NEG4			; negation (two's complement)
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG2
                                 	com	@0
                                 	com	@1
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 	
                                 .macro	LDI4 	; r..r0, k	; load immediate
                                 	ldi	@3,  low(@4)
                                 	ldi	@2, high(@4)
                                 	ldi	@1,byte3(@4)
                                 	ldi	@0,byte4(@4)
                                 	.endmacro
                                 .macro	LDI3
                                 	ldi	@2,  low(@3)
                                 	ldi	@1, high(@3)
                                 	ldi	@0,byte3(@3)
                                 	.endmacro
                                 .macro	LDI2
                                 	ldi	@1,  low(@2)
                                 	ldi	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LDS4			; load direct from SRAM
                                 	lds	@3,@4
                                 	lds	@2,@4+1
                                 	lds	@1,@4+2
                                 	lds	@0,@4+3
                                 	.endmacro
                                 .macro	LDS3
                                 	lds	@2,@3
                                 	lds	@1,@3+1
                                 	lds	@0,@3+2
                                 	.endmacro
                                 .macro	LDS2
                                 	lds	@1,@2
                                 	lds	@0,@2+1
                                 	.endmacro
                                 
                                 .macro	STS4			; store direct to SRAM
                                 	sts	@0+0,@4
                                 	sts	@0+1,@3
                                 	sts	@0+2,@2
                                 	sts	@0+3,@1
                                 	.endmacro
                                 .macro	STS3
                                 	sts	@0+0,@3
                                 	sts	@0+1,@2
                                 	sts	@0+2,@1
                                 	.endmacro
                                 .macro	STS2
                                 	sts	@0+0,@2
                                 	sts	@0+1,@1
                                 	.endmacro
                                 
                                 .macro	STDZ4	; d, r3,r2,r1,r0
                                 	std	z+@0+0,@4
                                 	std	z+@0+1,@3
                                 	std	z+@0+2,@2
                                 	std	z+@0+3,@1
                                 	.endmacro
                                 .macro	STDZ3	; d, r2,r1,r0
                                 	std	z+@0+0,@3
                                 	std	z+@0+1,@2
                                 	std	z+@0+2,@1
                                 	.endmacro
                                 .macro	STDZ2	; d, r1,r0
                                 	std	z+@0+0,@2
                                 	std	z+@0+1,@1
                                 	.endmacro
                                 	
                                 .macro	LPM4			; load program memory
                                 	lpm
                                 	mov	@3,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM3
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM2
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 
                                 .macro	MOV4			; move between registers
                                 	mov	@3,@7
                                 	mov	@2,@6
                                 	mov	@1,@5
                                 	mov	@0,@4
                                 	.endmacro
                                 .macro	MOV3
                                 	mov	@2,@5
                                 	mov	@1,@4
                                 	mov	@0,@3
                                 	.endmacro
                                 .macro	MOV2
                                 	mov	@1,@3
                                 	mov	@0,@2
                                 	.endmacro
                                 
                                 .macro	ADD4			; add
                                 	add	@3,@7
                                 	adc	@2,@6
                                 	adc	@1,@5
                                 	adc	@0,@4
                                 	.endmacro
                                 .macro	ADD3
                                 	add	@2,@5
                                 	adc	@1,@4
                                 	adc	@0,@3
                                 	.endmacro
                                 .macro	ADD2
                                 	add	@1,@3
                                 	adc	@0,@2
                                 	.endmacro
                                 
                                 .macro	SUB4			; subtract
                                 	sub	@3,@7
                                 	sbc	@2,@6
                                 	sbc	@1,@5
                                 	sbc	@0,@4
                                 	.endmacro
                                 .macro	SUB3
                                 	sub	@2,@5
                                 	sbc	@1,@4
                                 	sbc	@0,@3
                                 	.endmacro
                                 .macro	SUB2
                                 	sub	@1,@3
                                 	sbc	@0,@2
                                 	.endmacro
                                 	
                                 .macro	CP4			; compare
                                 	cp	@3,@7
                                 	cpc	@2,@6
                                 	cpc	@1,@5
                                 	cpc	@0,@4
                                 	.endmacro
                                 .macro	CP3
                                 	cp	@2,@5
                                 	cpc	@1,@4
                                 	cpc	@0,@3
                                 	.endmacro
                                 .macro	CP2
                                 	cp	@1,@3
                                 	cpc	@0,@2
                                 	.endmacro
                                 
                                 .macro	TST4			; test
                                 	clr	w
                                 	cp	@3,w
                                 	cpc	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST3
                                 	clr	w
                                 	cp	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST2
                                 	clr	w
                                 	cp	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 
                                 .macro	ADDI4			; add immediate
                                 	subi	@3,  low(-@4)
                                 	sbci	@2, high(-@4)
                                 	sbci	@1,byte3(-@4)
                                 	sbci	@0,byte4(-@4)
                                 	.endmacro
                                 .macro	ADDI3
                                 	subi	@2,  low(-@3)
                                 	sbci	@1, high(-@3)
                                 	sbci	@0,byte3(-@3)
                                 	.endmacro
                                 .macro	ADDI2
                                 	subi	@1,  low(-@2)
                                 	sbci	@0, high(-@2)
                                 	.endmacro
                                 	
                                 .macro	SUBI4			; subtract immediate
                                 	subi	@3,  low(@4)
                                 	sbci	@2, high(@4)
                                 	sbci	@1,byte3(@4)
                                 	sbci	@0,byte4(@4)
                                 	.endmacro
                                 .macro	SUBI3
                                 	subi	@2,  low(@3)
                                 	sbci	@1, high(@3)
                                 	sbci	@0,byte3(@3)
                                 	.endmacro
                                 .macro	SUBI2
                                 	subi	@1,  low(@2)
                                 	sbci	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LSL5			; logical shift left
                                 	lsl	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL4
                                 	lsl	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL3
                                 	lsl	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL2
                                 	lsl	@1
                                 	rol	@0
                                 	.endmacro
                                 	
                                 .macro	LSR4			; logical shift right
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	LSR3
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	LSR2
                                 	lsr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ASR4			; arithmetic shift right
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ASR3
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ASR2
                                 	asr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ROL8			; rotate left through carry
                                 	rol	@7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 
                                 .macro	ROR8			; rotate right through carry
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	ror	@7
                                 	.endmacro
                                 .macro	ROR7
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	.endmacro
                                 .macro	ROR6
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	.endmacro
                                 .macro	ROR5
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	.endmacro	
                                 .macro	ROR4
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ROR3
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ROR2
                                 	ror	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	PUSH2
                                 	push	@0
                                 	push	@1
                                 	.endmacro	
                                 .macro	POP2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 
                                 .macro	PUSH3
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	.endmacro	
                                 .macro	POP3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 	
                                 .macro	PUSH4
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	push	@3
                                 	.endmacro	
                                 .macro	POP4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 	
                                 .macro	PUSH5
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	push	@3
                                 	push	@4
                                 	.endmacro	
                                 .macro	POP5
                                 	pop	@4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 
                                 ; --- SRAM operations ---
                                 .macro	INCS4	; sram		; increment SRAM 4-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 	brne	end
                                 	lds	w,@0+3
                                 	inc	w
                                 	sts	@0+3,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS3	; sram		; increment SRAM 3-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS2	; sram		; increment SRAM 2-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS	; sram		; increment SRAM 1-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	DECS4	; sram		; decrement SRAM 4-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	lds	u,@0+3
                                 	sbc	u,w
                                 	sts	@0+3,u
                                 	.endmacro
                                 .macro	DECS3	; sram		; decrement SRAM 3-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	.endmacro
                                 .macro	DECS2	; sram		; decrement SRAM 2-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	.endmacro
                                 .macro	DECS	; sram		; decrement
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	MOVS4	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	lds	w,@3+1
                                 	sts	@0+3,w	
                                 	.endmacro
                                 .macro	MOVS3	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	.endmacro
                                 .macro	MOVS2	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	MOVS	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	SEXT	; reg1,reg0	; sign extend
                                 	clr	@0
                                 	sbrc	@1,7
                                 	dec	@0
                                 	.endmacro
                                 
                                 ; =======================================
                                 ;	Jump/Call with constant arguments
                                 ; =======================================
                                 	
                                 ; --- calls with arguments a,b,XYZ ---
                                 .macro	CX	; subroutine,x
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CXY	; subroutine,x,y
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXZ	; subroutine,x,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	zl, low(@2)
                                 	ldi	zh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXYZ	; subroutine,x,y,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)
                                 	ldi	zl, low(@3)
                                 	ldi	zh,high(@3)		
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CW	; subroutine,w
                                 	ldi	w, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CA	; subroutine,a
                                 	ldi	a0, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rcall	@0
                                 	.endmacro
                                 
                                 ; --- jump with arguments w,a,b ---
                                 .macro	JW	; subroutine,w
                                 	ldi	w, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JA	; subroutine,a
                                 	ldi	a0, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rjmp	@0
                                 	.endmacro
                                 .list
                                 .include "definitions.asm"	; include register/constant definitions
                                 
                                 ; purpose library, definition of addresses and constants
                                 ; 20171114 A.S.
                                 
                                 ; === definitions  ===
                                 .list
                                 .include "encoder.asm"		; include encoder routines
                                 
                                 ; purpose library angular encoder operation
                                 
                                 ; === definitions ===
                                 .equ	ENCOD	= PORTB
                                 
                                 .include "variables.asm"
                                 
                                  * variables.asm
                                  *
                                  *  Created: 09-05-22 11:07:17
                                  *   Author: Christian SK M
                                  */
                                 .dseg
                                 ;======== Temp ====================
000100                           adcl_temp:  .byte 1
000101                           adch_temp:  .byte 1
000102                           b0_temp: .byte 1
                                 
000103                           zl_led: .byte 1
000104                           zh_led: .byte 1
                                 
000105                           zl_graph: .byte 1
000106                           zh_graph: .byte 1
                                 
                                 ;========= Frequency Measures =========
000107                           counter: .byte 1
000108                           frequency: .byte 1
000109                           last_frequency: .byte 1
                                 
                                 ;========= Display Modes ==============
00010a                           mode: .byte 1
00010b                           change_mode: .byte 1
                                 
                                 ;========= Graph ======================
00010c                           height: .byte 1
00010d                           graph_start: .byte 1
00010e                           nb_column: .byte 1
                                 ;nb_shift: .byte 1
                                 
                                 ;========= Flags ======================
00010f                           hold: .byte 1
000110                           break_menu_loop: .byte 1
000111                           neg_flag: .byte 1
000112                           show_negative_flag: .byte 1
000113                           left_flag: .byte 1
000114                           right_flag: .byte 1
                                 
                                 ;============ 0-7 Shift Save containers =================
000115                           h0: .byte 1
000116                           h1: .byte 1
000117                           h2: .byte 1
000118                           h3: .byte 1
000119                           h4: .byte 1
00011a                           h5: .byte 1
00011b                           h6: .byte 1
00011c                           h7: .byte 1
                                 
                                 ;============ 8-15 Real Time Height containers ===========
00011d                           h8: .byte 1
00011e                           h9: .byte 1
00011f                           h10: .byte 1
000120                           h11: .byte 1
000121                           h12: .byte 1
000122                           h13: .byte 1
000123                           h14: .byte 1
000124                           h15: .byte 1
                                 
                                 ;============ 16-23 Previous Heights containers ==========
000125                           h16: .byte 1
000126                           h17: .byte 1
000127                           h18: .byte 1
000128                           h19: .byte 1
000129                           h20: .byte 1
00012a                           h21: .byte 1
00012b                           h22: .byte 1
00012c                           h23: .byte 1
                                 
                                 .dseg
00012d                           enc_old:.byte	1
                                 .cseg
                                 
                                 ; === routines ===
                                 rotation_right:
00009c ef0f                      	ser w
00009d 9300 0114                 	sts right_flag, w
00009f 2700                      	clr w
0000a0 9300 0113                 	sts left_flag, w
0000a2 9508                      	ret
                                 
                                 rotation_left:
0000a3 ef0f                      	ser w
0000a4 9300 0113                 	sts left_flag, w
0000a6 2700                      	clr w
0000a7 9300 0114                 	sts right_flag, w
0000a9 9508                      	ret
                                 
                                 encoder_init:
0000aa b307                      	in	w,ENCOD-1		; make 3 lines input
0000ab 780f                      	andi	w,0b10001111
0000ac bb07                      	out	ENCOD-1,w
0000ad b308                      	in	w,ENCOD			; enable 3 internal pull-ups
0000ae 6700                      	ori	w,0b01110000
0000af bb08                      	out	ENCOD,w
0000b0 9508                      	ret
                                 
                                 encoder:
                                 ; a0,b0	if button=up   then increment/decrement a0	 
                                 ; a0,b0	if button=down then incremnt/decrement b0 
                                 ; T 	T=1 button press (transition up-down)
                                 ; Z	Z=1 button down change
                                 
0000b1 94e8                      	clt						; preclear T
0000b2 b316                      	in	_w,ENCOD-2			; read encoder port (_w=new)
                                 	
0000b3 7710                      	andi	_w,0b01110000	; mask encoder lines (A,B,I)
0000b4 9020 012d                 	lds	_u,enc_old			; load prevous value (_u=old)
0000b6 1512                      	cp	_w,_u				; compare new<>old ?
0000b7 f411                      	brne	PC+3
0000b8 9498                      	clz
0000b9 9508                      	ret						; if new=old then return (Z=0)
0000ba 9310 012d                 	sts	enc_old,_w			; store encoder value for next time
                                 
0000bc 2621                      	eor	_u,_w				; exclusive or detects transitions
0000bd 9498                      	clz						; clear Z flag
0000be fc26                      	sbrc	_u,ENCOD_I
0000bf c01a                      	rjmp	encoder_button	; transition on I (button)
0000c0 fe24                      	sbrs	_u,ENCOD_A
0000c1 9508                      	ret						; return (no transition on I or A)	
                                 
0000c2 ff16                      	sbrs	_w,ENCOD_I		; is the button up or down ?
0000c3 c00b                      	rjmp	i_down
                                 i_up:	
0000c4 fd14                      	sbrc	_w,ENCOD_A
0000c5 c004                      	rjmp	a_rise
                                 a_fall:
0000c6 dfd5                      	rcall rotation_right					; if B=1 then increment
0000c7 ff15                      	sbrs	_w,ENCOD_B
0000c8 dfda                      	rcall rotation_left		; if B=0 then decrement
0000c9 c003                      	rjmp	i_up_done
                                 a_rise:
0000ca dfd1                      	rcall rotation_right					; if B=0 then increment
0000cb fd15                      	sbrc	_w,ENCOD_B
0000cc dfd6                      	rcall rotation_left			; if B=1 then decrement
                                 i_up_done:
0000cd 9498                      	clz						; clear Z
0000ce 9508                      	ret
                                 
                                 i_down:	
0000cf fd14                      	sbrc	_w,ENCOD_A
0000d0 c004                      	rjmp	a_rise2
                                 a_fall2:
0000d1 9563                      	inc	b0					; if B=1 then increment
0000d2 ff15                      	sbrs	_w,ENCOD_B
0000d3 5062                      	subi	b0,2			; if B=0 then decrement
0000d4 c003                      	rjmp	i_down_done
                                 a_rise2:
0000d5 9563                      	inc	b0					; if B=0 then increment
0000d6 fd15                      	sbrc	_w,ENCOD_B
0000d7 5062                      	subi	b0,2			; if B=1 then decrement
                                 i_down_done:
0000d8 9418                      	sez						; set Z
0000d9 9508                      	ret
                                 
                                 encoder_button:
0000da fd16                      	sbrc	_w,ENCOD_I
0000db c002                      	rjmp	i_rise
                                 i_fall:
0000dc 9468                      	set						; set T=1 to indicate button press
0000dd 9508                      	ret
                                 i_rise:
0000de 9508                      	ret
                                 
                                 .macro	CYCLIC	;reg,lo,hi
                                 	cpi	@0,@1-1
                                 	brne	PC+2
                                 	ldi	@0,@2
                                 	cpi	@0,@2+1
                                 	brne	PC+2
                                 	ldi	@0,@1
                                 .endmacro
                                 
                                 ;My macros and routines
                                 .include "distance.asm"
                                 
                                  * distance.asm
                                  *
                                  *  Created: 30-05-22 20:08:46
                                  *   Author: Christian SK M
                                  */ 
                                  .macro READ_DISTANCE
                                 	clr r23
                                 	sbi 	ADCSR, ADSC		; AD starts conversion
                                 	WB0		r23, 0		; wait as long as flag reset >flag set in the interrupt >service routine
                                 	in 		a0, ADCL
                                 	in 		a1, ADCH  	; read high byte second
                                 
                                 .macro CLEAR_GRAPH
                                 	clr w
                                 	sts h0,  w
                                 	sts h1,  w
                                 	sts h2,  w
                                 	sts h3,  w
                                 	sts h4,  w
                                 	sts h5,  w
                                 	sts h6,  w
                                 	sts h7,  w
                                 	sts h8,  w
                                 	sts h9,  w
                                 	sts h10, w
                                 	sts h11, w
                                 	sts h12, w
                                 	sts h13, w
                                 	sts h14, w
                                 	sts h15, w
                                 	sts h16, w
                                 	sts h17, w
                                 	sts h18, w
                                 	sts h19, w
                                 	sts h20, w
                                 	sts h21, w
                                 	sts h22, w
                                 	sts h23, w
                                 .endmacro
                                 
                                 reset:
0000df ef0f
0000e0 bf0d
0000e1 e100
0000e2 bf0e                      	LDSP	RAMEND			; Load Stack Pointer (SP)
0000e3 e002
0000e4 b902                      	OUTI	DDRE,0x02		; Connect LED Matrix to PORTE output mode
0000e5 e000
0000e6 bb01                      	OUTI	DDRD, 0x00		; connect Buttons to PORTD, input mode
0000e7 e808
0000e8 b906                      	OUTI 	ADCSR, (1<<ADEN)+(1<<ADIE)		; AD enable, AD int.
0000e9 e003
0000ea b907                      	OUTI ADMUX, 3		; select channel 3
                                 
0000eb 9478                      	sei 
0000ec d620                      	rcall 	LCD_init		; initialize the LCD
0000ed dfbc                      	rcall	encoder_init	; initialize the Encoder
                                 		
                                 	;configure timer0's prescaler
0000ee e008
0000ef bf00                      	OUTI ASSR, (1<<As0)
0000f0 e005
0000f1 bf03                      	OUTI TCCR0, PRESCALER
                                 	
                                 	;reset LCD
0000f2 d606                      	rcall LCD_clear
0000f3 d607                      	rcall LCD_home
                                 
0000f4 c000                      	rjmp menu
                                 
                                 menu:
                                 	menu_init:
                                 	;disable INT3	enable INT0, INT1, INT2
0000f5 b709                      	in w, EIMSK
0000f6 6007                      	ori w, 0b00000111
0000f7 7f07                      	andi w, 0b11110111
0000f8 bf09                      	out EIMSK, w
                                 
                                 	;disable timer0
0000f9 b707                      	in w, TIMSK
0000fa 7f0e                      	andi w,0b11111110
0000fb bf07                      	out TIMSK, w
                                 
                                 	;reset flags
0000fc 2700                      	clr w
0000fd 9300 010b                 	sts change_mode, w
                                 
                                 	;initialize menu variables
0000ff e008                      	ldi w, 8
000100 9300 010d                 	sts graph_start, w
                                 
                                 	menu_loop:
000102 e001
000103 2e30
000104 e001
000105 930f
000106 923f
000107 e300
000108 2e30
000109 e006
00010a 943a
00010b f7f1
00010c 943a
00010d 950a
00010e f7d9
00010f 903f
000110 910f
000111 943a
000112 f791
000113 950a
000114 f781                      	WAIT_MS	1				;wait 1 milisecond (debouncing)
000115 df9b                      	rcall	encoder
                                 
                                 	;check for left shift
000116 9100 0113                 	lds w, left_flag
000118 3f0f                      	cpi w, 0xff
000119 f431                      	brne check_right
00011a 9100 010d                 	lds w, graph_start
00011c 3008                      	cpi w, 8
00011d f009                      	breq PC+2
00011e d00b                      	rcall shift_left
00011f c0d4                      	rjmp graph_display
                                 
                                 	;check for right shift
                                 	check_right:
000120 9100 0114                 	lds w, right_flag
000122 3f0f                      	cpi w, 0xff
000123 f409                      	brne PC+2
000124 9100 010d                 	lds w, graph_start
000126 3000                      	cpi w, 0
000127 f009                      	breq PC+2
000128 d066                      	rcall shift_right
000129 c0ca                      	rjmp graph_display
                                 
                                 .include "graph.asm"
                                 
                                  * graph.asm
                                  *
                                  *  Created: 30-05-22 19:56:34
                                  *   Author: Christian SK M
                                  */
                                  
                                 .include "led_macros.asm"
                                 
                                  * led_macros.asm
                                  *
                                  *  Created: 30-05-22 19:59:52
                                  *   Author: Christian SK M
                                  */
                                  ;LED_CELL
                                  ;purpose: store one led in SRAM of color rgb(@0,@1,@2) in z
                                  .macro LED_CELL
                                 	ldi    a0,@0
                                 	st     z+,a0
                                 	ldi    a0,@1
                                 	st     z+,a0
                                 	ldi    a0,@2
                                 	st     z+,a0
                                 .endmacro
                                 
                                 .macro LOW_LED		; STORE GREEN LED FOR LOW GRAPH HEIGHT
                                 	LED_CELL 10,0,0
                                 .endmacro
                                 
                                 .macro MEDIUM_LED	; STORE MEDIUM LED FOR MEDIUM GRAPH HEIGHT
                                 	LED_CELL 14,25,0
                                 .endmacro
                                 
                                 .macro HIGH_LED		; STORE RED LED FOR HIGH GRAPH HEIGHT
                                 	LED_CELL 0,10,0
                                 .endmacro
                                 
                                 ; LED_BAR
                                 ; purpose: store @0 consecutive leds of color @1,@2,@3 in z
                                 .macro LED_BAR
                                 	line_loop:
                                 		ldi    a0,@1
                                 		st     z+,a0
                                 		ldi    a0,@2
                                 		st     z+,a0
                                 		ldi    a0,@3
                                 		st     z+,a0
                                 		dec @0
                                 		brne line_loop
                                 .endmacro
                                 
                                 ;============= LED_BAR COLORS ==============
                                 ; EMPTY_BAR
                                 ; purpose: store @0 empty leds in z
                                 .macro EMPTY_BAR
                                 	LED_BAR @0,0,0,0
                                 .endmacro
                                 
                                 
                                 ; EMPTY_BAR
                                 ; purpose: store @0 white leds in z
                                 .macro WHITE_BAR
                                 	LED_BAR @0,5,5,5
                                 .endmacro
                                 
                                 ;============= DRAW FUNCTIONS ==============
                                 ; CLEAR_SCREEN
                                 ; purpose: write empty leds on all 64 leds --> clear screen
                                 .macro CLEAR_SCREEN
                                 	ldi zl,low(0x0400)
                                 	ldi zh,high(0x0400)
                                 	ldi w, 64
                                 	EMPTY_BAR w
                                 	ldi zl,low(0x0400)
                                 	ldi zh,high(0x0400)
                                 
                                  .macro DRAW_LINE
                                 	;check for negative value
                                 	cpi b0, 0
                                 	brpl color_state_switch
                                 	ldi w, 0xff
                                 	sts neg_flag, w
                                 	neg b0
                                 
                                 	color_state_switch:
                                 	cpi b0, 3
                                 	brsh orange_dot
                                 	LOW_LED					;GREEN
                                 	rjmp restore_neg
                                 	orange_dot:
                                 	cpi b0, 5
                                 	brsh red_dot
                                 	MEDIUM_LED				;ORANGE
                                 	rjmp restore_neg
                                 	red_dot:
                                 	HIGH_LED				;RED
                                 
                                 	restore_neg:
                                 	lds w, neg_flag
                                 	cpi w, 0xff
                                 	brne end
                                 	neg b0
                                 	clr w
                                 	sts neg_flag, w
                                 	end:
                                 	nop
                                 .endmacro
                                 
                                 .macro BAR
                                 	ldi w, 6
                                 	sub w, b0			; Calculate empty leds
                                 
                                 	breq draw_height
                                 	EMPTY_BAR w
                                 
                                 	draw_height:
                                 	cpi b0, 0
                                 	breq finish		; Height null?
                                 	LED_CELL @0, @1, @2
                                 	cpi b0, 1
                                 	breq finish		; Draw white bar?
                                 	dec b0
                                 	WHITE_BAR b0
                                 		
                                 	finish:
                                 	nop
                                 .endmacro
                                 
                                 .macro GRAPH_COLUMN
                                 	;draw bottom line led
                                 	bottom_line:
                                 	sts height, b0
                                 	DRAW_LINE
                                 	
                                 	;draw height
                                 	cpi b0, 0
                                 	brmi red_dot			;
                                 
                                 	blue_dot:				;blue dot for positive
                                 	BAR 0,0,10
                                 	rjmp top_line
                                 
                                 	red_dot:				;red dot for negative
                                 	neg b0
                                 	BAR 0,10,0
                                 
                                 	;draw top line led
                                 	top_line:
                                 	lds b0, height
                                 	DRAW_LINE
                                 .endmacro
                                 
                                 .macro DRAW_GRAPH
                                 	;move z pointer back to first led adress
                                 	ldi zl, low(0x400)
                                 	ldi zh, high(0x400)
                                 	
                                 	;draw graphic
                                 	lds b0, h8
                                 	GRAPH_COLUMN
                                 	lds b0, h9
                                 	GRAPH_COLUMN
                                 	lds b0, h10
                                 	GRAPH_COLUMN
                                 	lds b0, h11
                                 	GRAPH_COLUMN
                                 	lds b0, h12
                                 	GRAPH_COLUMN
                                 	lds b0, h13
                                 	GRAPH_COLUMN
                                 	lds b0, h14
                                 	GRAPH_COLUMN
                                 	lds b0, h15
                                 	GRAPH_COLUMN
                                 .endmacro
                                 
                                 
                                 ; shift_left
                                 ; purpose: shift whole graph left
                                 shift_left:
00012a 9100 010d                 	lds w, graph_start
00012c 9503                      	inc w
00012d 9300 010d                 	sts graph_start, w
                                 
00012f 9100 012b                 	lds w, h22
000131 9300 012c                 	sts h23, w
000133 9100 012a                 	lds w, h21
000135 9300 012b                 	sts h22, w
000137 9100 0129                 	lds w, h20
000139 9300 012a                 	sts h21, w
00013b 9100 0128                 	lds w, h19
00013d 9300 0129                 	sts h20, w
00013f 9100 0127                 	lds w, h18
000141 9300 0128                 	sts h19, w
000143 9100 0126                 	lds w, h17
000145 9300 0127                 	sts h18, w
000147 9100 0125                 	lds w, h16
000149 9300 0126                 	sts h17, w
00014b 9100 0124                 	lds w, h15
00014d 9300 0125                 	sts h16, w
00014f 9100 0123                 	lds w, h14
000151 9300 0124                 	sts h15, w
000153 9100 0122                 	lds w, h13
000155 9300 0123                 	sts h14, w
000157 9100 0121                 	lds w, h12
000159 9300 0122                 	sts h13, w
00015b 9100 0120                 	lds w, h11
00015d 9300 0121                 	sts h12, w
00015f 9100 011f                 	lds w, h10
000161 9300 0120                 	sts h11, w
000163 9100 011e                 	lds w, h9
000165 9300 011f                 	sts h10, w
000167 9100 011d                 	lds w, h8
000169 9300 011e                 	sts h9, w
00016b 9100 011c                 	lds w, h7
00016d 9300 011d                 	sts h8, w
00016f 9100 011b                 	lds w, h6
000171 9300 011c                 	sts h7, w
000173 9100 011a                 	lds w, h5
000175 9300 011b                 	sts h6, w
000177 9100 0119                 	lds w, h4
000179 9300 011a                 	sts h5, w
00017b 9100 0118                 	lds w, h3
00017d 9300 0119                 	sts h4, w
00017f 9100 0117                 	lds w, h2
000181 9300 0118                 	sts h3, w
000183 9100 0116                 	lds w, h1
000185 9300 0117                 	sts h2, w
000187 9100 0115                 	lds w, h0
000189 9300 0116                 	sts h1, w
                                 
00018b 2700                      	clr w
00018c 9300 0113                 	sts left_flag, w
00018e 9508                      	ret
                                 
                                 
                                 ; shift_right
                                 ; purpose: shift whole graph right
                                 shift_right:
00018f 9100 010d                 	lds w, graph_start
000191 950a                      	dec w
000192 9300 010d                 	sts graph_start, w
                                 
000194 9100 0116                 	lds w, h1
000196 9300 0115                 	sts h0, w
000198 9100 0117                 	lds w, h2
00019a 9300 0116                 	sts h1, w
00019c 9100 0118                 	lds w, h3
00019e 9300 0117                 	sts h2, w
0001a0 9100 0119                 	lds w, h4
0001a2 9300 0118                 	sts h3, w
0001a4 9100 011a                 	lds w, h5
0001a6 9300 0119                 	sts h4, w
0001a8 9100 011b                 	lds w, h6
0001aa 9300 011a                 	sts h5, w
0001ac 9100 011c                 	lds w, h7
0001ae 9300 011b                 	sts h6, w
0001b0 9100 011d                 	lds w, h8
0001b2 9300 011c                 	sts h7, w
0001b4 9100 011e                 	lds w, h9
0001b6 9300 011d                 	sts h8, w
0001b8 9100 011f                 	lds w, h10
0001ba 9300 011e                 	sts h9, w
0001bc 9100 0120                 	lds w, h11
0001be 9300 011f                 	sts h10, w
0001c0 9100 0121                 	lds w, h12
0001c2 9300 0120                 	sts h11, w
0001c4 9100 0122                 	lds w, h13
0001c6 9300 0121                 	sts h12, w
0001c8 9100 0123                 	lds w, h14
0001ca 9300 0122                 	sts h13, w
0001cc 9100 0124                 	lds w, h15
0001ce 9300 0123                 	sts h14, w
0001d0 9100 0125                 	lds w, h16
0001d2 9300 0124                 	sts h15, w
0001d4 9100 0126                 	lds w, h17
0001d6 9300 0125                 	sts h16, w
0001d8 9100 0127                 	lds w, h18
0001da 9300 0126                 	sts h17, w
0001dc 9100 0128                 	lds w, h19
0001de 9300 0127                 	sts h18, w
0001e0 9100 0129                 	lds w, h20
0001e2 9300 0128                 	sts h19, w
0001e4 9100 012a                 	lds w, h21
0001e6 9300 0129                 	sts h20, w
0001e8 9100 012b                 	lds w, h22
0001ea 9300 012a                 	sts h21, w
0001ec 9100 012c                 	lds w, h23
0001ee 9300 012b                 	sts h22, w
                                 
0001f0 2700                      	clr w
0001f1 9300 0114                 	sts right_flag, w
0001f3 9508                      
                                 	graph_display:
0001f4 e0e0
0001f5 e0f4
0001f6 9160 011d
0001f8 9360 010c
0001fa 3060
0001fb f422
0001fc ef0f
0001fd 9300 0111
0001ff 9561
000200 3063
000201 f438
000202 e02a
000203 9321
000204 e020
000205 9321
000206 e020
000207 9321
000208 c00f
000209 3065
00020a f438
00020b e02e
00020c 9321
00020d e129
00020e 9321
00020f e020
000210 9321
000211 c006
000212 e020
000213 9321
000214 e02a
000215 9321
000216 e020
000217 9321
000218 9100 0111
00021a 3f0f
00021b f421
00021c 9561
00021d 2700
00021e 9300 0111
000220 0000
000221 3060
000222 f102
000223 e006
000224 1b06
000225 f041
000226 e020
000227 9321
000228 e020
000229 9321
00022a e020
00022b 9321
00022c 950a
00022d f7c1
00022e 3060
00022f f089
000230 e020
000231 9321
000232 e020
000233 9321
000234 e02a
000235 9321
000236 3061
000237 f049
000238 956a
000239 e025
00023a 9321
00023b e025
00023c 9321
00023d e025
00023e 9321
00023f 956a
000240 f7c1
000241 0000
000242 c020
000243 9561
000244 e006
000245 1b06
000246 f041
000247 e020
000248 9321
000249 e020
00024a 9321
00024b e020
00024c 9321
00024d 950a
00024e f7c1
00024f 3060
000250 f089
000251 e020
000252 9321
000253 e02a
000254 9321
000255 e020
000256 9321
000257 3061
000258 f049
000259 956a
00025a e025
00025b 9321
00025c e025
00025d 9321
00025e e025
00025f 9321
000260 956a
000261 f7c1
000262 0000
000263 9160 010c
000265 3060
000266 f422
000267 ef0f
000268 9300 0111
00026a 9561
00026b 3063
00026c f438
00026d e02a
00026e 9321
00026f e020
000270 9321
000271 e020
000272 9321
000273 c00f
000274 3065
000275 f438
000276 e02e
000277 9321
000278 e129
000279 9321
00027a e020
00027b 9321
00027c c006
00027d e020
00027e 9321
00027f e02a
000280 9321
000281 e020
000282 9321
000283 9100 0111
000285 3f0f
000286 f421
000287 9561
000288 2700
000289 9300 0111
00028b 0000
00028c 9160 011e
00028e 9360 010c
000290 3060
000291 f422
000292 ef0f
000293 9300 0111
000295 9561
000296 3063
000297 f438
000298 e02a
000299 9321
00029a e020
00029b 9321
00029c e020
00029d 9321
00029e c00f
00029f 3065
0002a0 f438
0002a1 e02e
0002a2 9321
0002a3 e129
0002a4 9321
0002a5 e020
0002a6 9321
0002a7 c006
0002a8 e020
0002a9 9321
0002aa e02a
0002ab 9321
0002ac e020
0002ad 9321
0002ae 9100 0111
0002b0 3f0f
0002b1 f421
0002b2 9561
0002b3 2700
0002b4 9300 0111
0002b6 0000
0002b7 3060
0002b8 f102
0002b9 e006
0002ba 1b06
0002bb f041
0002bc e020
0002bd 9321
0002be e020
0002bf 9321
0002c0 e020
0002c1 9321
0002c2 950a
0002c3 f7c1
0002c4 3060
0002c5 f089
0002c6 e020
0002c7 9321
0002c8 e020
0002c9 9321
0002ca e02a
0002cb 9321
0002cc 3061
0002cd f049
0002ce 956a
0002cf e025
0002d0 9321
0002d1 e025
0002d2 9321
0002d3 e025
0002d4 9321
0002d5 956a
0002d6 f7c1
0002d7 0000
0002d8 c020
0002d9 9561
0002da e006
0002db 1b06
0002dc f041
0002dd e020
0002de 9321
0002df e020
0002e0 9321
0002e1 e020
0002e2 9321
0002e3 950a
0002e4 f7c1
0002e5 3060
0002e6 f089
0002e7 e020
0002e8 9321
0002e9 e02a
0002ea 9321
0002eb e020
0002ec 9321
0002ed 3061
0002ee f049
0002ef 956a
0002f0 e025
0002f1 9321
0002f2 e025
0002f3 9321
0002f4 e025
0002f5 9321
0002f6 956a
0002f7 f7c1
0002f8 0000
0002f9 9160 010c
0002fb 3060
0002fc f422
0002fd ef0f
0002fe 9300 0111
000300 9561
000301 3063
000302 f438
000303 e02a
000304 9321
000305 e020
000306 9321
000307 e020
000308 9321
000309 c00f
00030a 3065
00030b f438
00030c e02e
00030d 9321
00030e e129
00030f 9321
000310 e020
000311 9321
000312 c006
000313 e020
000314 9321
000315 e02a
000316 9321
000317 e020
000318 9321
000319 9100 0111
00031b 3f0f
00031c f421
00031d 9561
00031e 2700
00031f 9300 0111
000321 0000
000322 9160 011f
000324 9360 010c
000326 3060
000327 f422
000328 ef0f
000329 9300 0111
00032b 9561
00032c 3063
00032d f438
00032e e02a
00032f 9321
000330 e020
000331 9321
000332 e020
000333 9321
000334 c00f
000335 3065
000336 f438
000337 e02e
000338 9321
000339 e129
00033a 9321
00033b e020
00033c 9321
00033d c006
00033e e020
00033f 9321
000340 e02a
000341 9321
000342 e020
000343 9321
000344 9100 0111
000346 3f0f
000347 f421
000348 9561
000349 2700
00034a 9300 0111
00034c 0000
00034d 3060
00034e f102
00034f e006
000350 1b06
000351 f041
000352 e020
000353 9321
000354 e020
000355 9321
000356 e020
000357 9321
000358 950a
000359 f7c1
00035a 3060
00035b f089
00035c e020
00035d 9321
00035e e020
00035f 9321
000360 e02a
000361 9321
000362 3061
000363 f049
000364 956a
000365 e025
000366 9321
000367 e025
000368 9321
000369 e025
00036a 9321
00036b 956a
00036c f7c1
00036d 0000
00036e c020
00036f 9561
000370 e006
000371 1b06
000372 f041
000373 e020
000374 9321
000375 e020
000376 9321
000377 e020
000378 9321
000379 950a
00037a f7c1
00037b 3060
00037c f089
00037d e020
00037e 9321
00037f e02a
000380 9321
000381 e020
000382 9321
000383 3061
000384 f049
000385 956a
000386 e025
000387 9321
000388 e025
000389 9321
00038a e025
00038b 9321
00038c 956a
00038d f7c1
00038e 0000
00038f 9160 010c
000391 3060
000392 f422
000393 ef0f
000394 9300 0111
000396 9561
000397 3063
000398 f438
000399 e02a
00039a 9321
00039b e020
00039c 9321
00039d e020
00039e 9321
00039f c00f
0003a0 3065
0003a1 f438
0003a2 e02e
0003a3 9321
0003a4 e129
0003a5 9321
0003a6 e020
0003a7 9321
0003a8 c006
0003a9 e020
0003aa 9321
0003ab e02a
0003ac 9321
0003ad e020
0003ae 9321
0003af 9100 0111
0003b1 3f0f
0003b2 f421
0003b3 9561
0003b4 2700
0003b5 9300 0111
0003b7 0000
0003b8 9160 0120
0003ba 9360 010c
0003bc 3060
0003bd f422
0003be ef0f
0003bf 9300 0111
0003c1 9561
0003c2 3063
0003c3 f438
0003c4 e02a
0003c5 9321
0003c6 e020
0003c7 9321
0003c8 e020
0003c9 9321
0003ca c00f
0003cb 3065
0003cc f438
0003cd e02e
0003ce 9321
0003cf e129
0003d0 9321
0003d1 e020
0003d2 9321
0003d3 c006
0003d4 e020
0003d5 9321
0003d6 e02a
0003d7 9321
0003d8 e020
0003d9 9321
0003da 9100 0111
0003dc 3f0f
0003dd f421
0003de 9561
0003df 2700
0003e0 9300 0111
0003e2 0000
0003e3 3060
0003e4 f102
0003e5 e006
0003e6 1b06
0003e7 f041
0003e8 e020
0003e9 9321
0003ea e020
0003eb 9321
0003ec e020
0003ed 9321
0003ee 950a
0003ef f7c1
0003f0 3060
0003f1 f089
0003f2 e020
0003f3 9321
0003f4 e020
0003f5 9321
0003f6 e02a
0003f7 9321
0003f8 3061
0003f9 f049
0003fa 956a
0003fb e025
0003fc 9321
0003fd e025
0003fe 9321
0003ff e025
000400 9321
000401 956a
000402 f7c1
000403 0000
000404 c020
000405 9561
000406 e006
000407 1b06
000408 f041
000409 e020
00040a 9321
00040b e020
00040c 9321
00040d e020
00040e 9321
00040f 950a
000410 f7c1
000411 3060
000412 f089
000413 e020
000414 9321
000415 e02a
000416 9321
000417 e020
000418 9321
000419 3061
00041a f049
00041b 956a
00041c e025
00041d 9321
00041e e025
00041f 9321
000420 e025
000421 9321
000422 956a
000423 f7c1
000424 0000
000425 9160 010c
000427 3060
000428 f422
000429 ef0f
00042a 9300 0111
00042c 9561
00042d 3063
00042e f438
00042f e02a
000430 9321
000431 e020
000432 9321
000433 e020
000434 9321
000435 c00f
000436 3065
000437 f438
000438 e02e
000439 9321
00043a e129
00043b 9321
00043c e020
00043d 9321
00043e c006
00043f e020
000440 9321
000441 e02a
000442 9321
000443 e020
000444 9321
000445 9100 0111
000447 3f0f
000448 f421
000449 9561
00044a 2700
00044b 9300 0111
00044d 0000
00044e 9160 0121
000450 9360 010c
000452 3060
000453 f422
000454 ef0f
000455 9300 0111
000457 9561
000458 3063
000459 f438
00045a e02a
00045b 9321
00045c e020
00045d 9321
00045e e020
00045f 9321
000460 c00f
000461 3065
000462 f438
000463 e02e
000464 9321
000465 e129
000466 9321
000467 e020
000468 9321
000469 c006
00046a e020
00046b 9321
00046c e02a
00046d 9321
00046e e020
00046f 9321
000470 9100 0111
000472 3f0f
000473 f421
000474 9561
000475 2700
000476 9300 0111
000478 0000
000479 3060
00047a f102
00047b e006
00047c 1b06
00047d f041
00047e e020
00047f 9321
000480 e020
000481 9321
000482 e020
000483 9321
000484 950a
000485 f7c1
000486 3060
000487 f089
000488 e020
000489 9321
00048a e020
00048b 9321
00048c e02a
00048d 9321
00048e 3061
00048f f049
000490 956a
000491 e025
000492 9321
000493 e025
000494 9321
000495 e025
000496 9321
000497 956a
000498 f7c1
000499 0000
00049a c020
00049b 9561
00049c e006
00049d 1b06
00049e f041
00049f e020
0004a0 9321
0004a1 e020
0004a2 9321
0004a3 e020
0004a4 9321
0004a5 950a
0004a6 f7c1
0004a7 3060
0004a8 f089
0004a9 e020
0004aa 9321
0004ab e02a
0004ac 9321
0004ad e020
0004ae 9321
0004af 3061
0004b0 f049
0004b1 956a
0004b2 e025
0004b3 9321
0004b4 e025
0004b5 9321
0004b6 e025
0004b7 9321
0004b8 956a
0004b9 f7c1
0004ba 0000
0004bb 9160 010c
0004bd 3060
0004be f422
0004bf ef0f
0004c0 9300 0111
0004c2 9561
0004c3 3063
0004c4 f438
0004c5 e02a
0004c6 9321
0004c7 e020
0004c8 9321
0004c9 e020
0004ca 9321
0004cb c00f
0004cc 3065
0004cd f438
0004ce e02e
0004cf 9321
0004d0 e129
0004d1 9321
0004d2 e020
0004d3 9321
0004d4 c006
0004d5 e020
0004d6 9321
0004d7 e02a
0004d8 9321
0004d9 e020
0004da 9321
0004db 9100 0111
0004dd 3f0f
0004de f421
0004df 9561
0004e0 2700
0004e1 9300 0111
0004e3 0000
0004e4 9160 0122
0004e6 9360 010c
0004e8 3060
0004e9 f422
0004ea ef0f
0004eb 9300 0111
0004ed 9561
0004ee 3063
0004ef f438
0004f0 e02a
0004f1 9321
0004f2 e020
0004f3 9321
0004f4 e020
0004f5 9321
0004f6 c00f
0004f7 3065
0004f8 f438
0004f9 e02e
0004fa 9321
0004fb e129
0004fc 9321
0004fd e020
0004fe 9321
0004ff c006
000500 e020
000501 9321
000502 e02a
000503 9321
000504 e020
000505 9321
000506 9100 0111
000508 3f0f
000509 f421
00050a 9561
00050b 2700
00050c 9300 0111
00050e 0000
00050f 3060
000510 f102
000511 e006
000512 1b06
000513 f041
000514 e020
000515 9321
000516 e020
000517 9321
000518 e020
000519 9321
00051a 950a
00051b f7c1
00051c 3060
00051d f089
00051e e020
00051f 9321
000520 e020
000521 9321
000522 e02a
000523 9321
000524 3061
000525 f049
000526 956a
000527 e025
000528 9321
000529 e025
00052a 9321
00052b e025
00052c 9321
00052d 956a
00052e f7c1
00052f 0000
000530 c020
000531 9561
000532 e006
000533 1b06
000534 f041
000535 e020
000536 9321
000537 e020
000538 9321
000539 e020
00053a 9321
00053b 950a
00053c f7c1
00053d 3060
00053e f089
00053f e020
000540 9321
000541 e02a
000542 9321
000543 e020
000544 9321
000545 3061
000546 f049
000547 956a
000548 e025
000549 9321
00054a e025
00054b 9321
00054c e025
00054d 9321
00054e 956a
00054f f7c1
000550 0000
000551 9160 010c
000553 3060
000554 f422
000555 ef0f
000556 9300 0111
000558 9561
000559 3063
00055a f438
00055b e02a
00055c 9321
00055d e020
00055e 9321
00055f e020
000560 9321
000561 c00f
000562 3065
000563 f438
000564 e02e
000565 9321
000566 e129
000567 9321
000568 e020
000569 9321
00056a c006
00056b e020
00056c 9321
00056d e02a
00056e 9321
00056f e020
000570 9321
000571 9100 0111
000573 3f0f
000574 f421
000575 9561
000576 2700
000577 9300 0111
000579 0000
00057a 9160 0123
00057c 9360 010c
00057e 3060
00057f f422
000580 ef0f
000581 9300 0111
000583 9561
000584 3063
000585 f438
000586 e02a
000587 9321
000588 e020
000589 9321
00058a e020
00058b 9321
00058c c00f
00058d 3065
00058e f438
00058f e02e
000590 9321
000591 e129
000592 9321
000593 e020
000594 9321
000595 c006
000596 e020
000597 9321
000598 e02a
000599 9321
00059a e020
00059b 9321
00059c 9100 0111
00059e 3f0f
00059f f421
0005a0 9561
0005a1 2700
0005a2 9300 0111
0005a4 0000
0005a5 3060
0005a6 f102
0005a7 e006
0005a8 1b06
0005a9 f041
0005aa e020
0005ab 9321
0005ac e020
0005ad 9321
0005ae e020
0005af 9321
0005b0 950a
0005b1 f7c1
0005b2 3060
0005b3 f089
0005b4 e020
0005b5 9321
0005b6 e020
0005b7 9321
0005b8 e02a
0005b9 9321
0005ba 3061
0005bb f049
0005bc 956a
0005bd e025
0005be 9321
0005bf e025
0005c0 9321
0005c1 e025
0005c2 9321
0005c3 956a
0005c4 f7c1
0005c5 0000
0005c6 c020
0005c7 9561
0005c8 e006
0005c9 1b06
0005ca f041
0005cb e020
0005cc 9321
0005cd e020
0005ce 9321
0005cf e020
0005d0 9321
0005d1 950a
0005d2 f7c1
0005d3 3060
0005d4 f089
0005d5 e020
0005d6 9321
0005d7 e02a
0005d8 9321
0005d9 e020
0005da 9321
0005db 3061
0005dc f049
0005dd 956a
0005de e025
0005df 9321
0005e0 e025
0005e1 9321
0005e2 e025
0005e3 9321
0005e4 956a
0005e5 f7c1
0005e6 0000
0005e7 9160 010c
0005e9 3060
0005ea f422
0005eb ef0f
0005ec 9300 0111
0005ee 9561
0005ef 3063
0005f0 f438
0005f1 e02a
0005f2 9321
0005f3 e020
0005f4 9321
0005f5 e020
0005f6 9321
0005f7 c00f
0005f8 3065
0005f9 f438
0005fa e02e
0005fb 9321
0005fc e129
0005fd 9321
0005fe e020
0005ff 9321
000600 c006
000601 e020
000602 9321
000603 e02a
000604 9321
000605 e020
000606 9321
000607 9100 0111
000609 3f0f
00060a f421
00060b 9561
00060c 2700
00060d 9300 0111
00060f 0000
000610 9160 0124
000612 9360 010c
000614 3060
000615 f422
000616 ef0f
000617 9300 0111
000619 9561
00061a 3063
00061b f438
00061c e02a
00061d 9321
00061e e020
00061f 9321
000620 e020
000621 9321
000622 c00f
000623 3065
000624 f438
000625 e02e
000626 9321
000627 e129
000628 9321
000629 e020
00062a 9321
00062b c006
00062c e020
00062d 9321
00062e e02a
00062f 9321
000630 e020
000631 9321
000632 9100 0111
000634 3f0f
000635 f421
000636 9561
000637 2700
000638 9300 0111
00063a 0000
00063b 3060
00063c f102
00063d e006
00063e 1b06
00063f f041
000640 e020
000641 9321
000642 e020
000643 9321
000644 e020
000645 9321
000646 950a
000647 f7c1
000648 3060
000649 f089
00064a e020
00064b 9321
00064c e020
00064d 9321
00064e e02a
00064f 9321
000650 3061
000651 f049
000652 956a
000653 e025
000654 9321
000655 e025
000656 9321
000657 e025
000658 9321
000659 956a
00065a f7c1
00065b 0000
00065c c020
00065d 9561
00065e e006
00065f 1b06
000660 f041
000661 e020
000662 9321
000663 e020
000664 9321
000665 e020
000666 9321
000667 950a
000668 f7c1
000669 3060
00066a f089
00066b e020
00066c 9321
00066d e02a
00066e 9321
00066f e020
000670 9321
000671 3061
000672 f049
000673 956a
000674 e025
000675 9321
000676 e025
000677 9321
000678 e025
000679 9321
00067a 956a
00067b f7c1
00067c 0000
00067d 9160 010c
00067f 3060
000680 f422
000681 ef0f
000682 9300 0111
000684 9561
000685 3063
000686 f438
000687 e02a
000688 9321
000689 e020
00068a 9321
00068b e020
00068c 9321
00068d c00f
00068e 3065
00068f f438
000690 e02e
000691 9321
000692 e129
000693 9321
000694 e020
000695 9321
000696 c006
000697 e020
000698 9321
000699 e02a
00069a 9321
00069b e020
00069c 9321
00069d 9100 0111
00069f 3f0f
0006a0 f421
0006a1 9561
0006a2 2700
0006a3 9300 0111
0006a5 0000                      	DRAW_GRAPH
0006a6 c196                      	rjmp mode_display
                                 
                                 .include "ws2812b_4MHz.asm"
                                 
                                  * ws2812b_4MHz.asm
                                  *
                                  *  Created: 30-05-22 20:04:45
                                  *   Author: Christian SK M
                                  */
                                 
                                  ; WS2812b4_WR0	; macro ; arg: void; used: void
                                 ; purpose: write an active-high zero-pulse to PD1
                                 .macro	WS2812b4_WR0
                                 	clr u
                                 	sbi PORTE, 1
                                 	out PORTE, u
                                 	nop
                                 	nop
                                 	;nop	;deactivated on purpose of respecting timings
                                 	;nop
                                 .endm
                                 
                                 ; WS2812b4_WR1	; macro ; arg: void; used: void
                                 ; purpose: write an active-high one-pulse to PD1
                                 .macro	WS2812b4_WR1
                                 	sbi PORTE, 1
                                 	nop
                                 	nop
                                 	cbi PORTE, 1
                                 	;nop	;deactivated on purpose of respecting timings
                                 	;nop
                                 
                                 .endm
                                 
                                  .macro DISPLAY 
                                 	restart:
                                 		ldi zl,low(0x0400)
                                 		ldi zh,high(0x0400)
                                 
                                 	_LDI	r0,64
                                 	loop:
                                 		ld a0, z+
                                 		ld a1, z+
                                 		ld a2, z+
                                 
                                 		cli
                                 		rcall ws2812b4_byte3wr
                                 		sei
                                 
                                 		dec r0
                                 		brne loop
                                 	rcall ws2812b4_reset
                                 .endm
                                 
                                  ; ws2812b4_init		; arg: void; used: r16 (w)
                                 ; purpose: initialize AVR to support ws2812
                                 
                                 ; ws2812b4_byte3wr	; arg: a0,a1,a2 ; used: r16 (w)
                                 ; purpose: write contents of a0,a1,a2 (24 bit) into ws2812, 1 LED configuring
                                 ;     GBR color coding, LSB first
                                 ws2812b4_byte3wr:
                                 
0006a7 e008                      	ldi w,8
                                 ws2b3_starta0:
0006a8 fd27                      	sbrc a0,7
0006a9 c006                      	rjmp	ws2b3w1
0006aa 2433
0006ab 9a19
0006ac b833
0006ad 0000
0006ae 0000                      	WS2812b4_WR0			; write zero
0006af c004                      	rjmp	ws2b3_nexta0
                                 ws2b3w1:
0006b0 9a19
0006b1 0000
0006b2 0000
0006b3 9819                      	WS2812b4_WR1
                                 ws2b3_nexta0:
0006b4 0f22                      	lsl a0
0006b5 950a                      	dec	w
0006b6 f789                      	brne ws2b3_starta0
                                 
0006b7 e008                      	ldi w,8
                                 ws2b3_starta1:
0006b8 fd37                      	sbrc a1,7
0006b9 c006                      	rjmp	ws2b3w1a1
0006ba 2433
0006bb 9a19
0006bc b833
0006bd 0000
0006be 0000                      	WS2812b4_WR0			; write a zero
0006bf c004                      	rjmp	ws2b3_nexta1
                                 ws2b3w1a1:
0006c0 9a19
0006c1 0000
0006c2 0000
0006c3 9819                      	WS2812b4_WR1
                                 ws2b3_nexta1:
0006c4 0f33                      	lsl a1
0006c5 950a                      	dec	w
0006c6 f789                      	brne ws2b3_starta1
                                 
0006c7 e008                      	ldi w,8
                                 ws2b3_starta2:
0006c8 fd47                      	sbrc a2,7
0006c9 c006                      	rjmp	ws2b3w1a2
0006ca 2433
0006cb 9a19
0006cc b833
0006cd 0000
0006ce 0000                      	WS2812b4_WR0			; write a zero
0006cf c004                      	rjmp	ws2b3_nexta2
                                 ws2b3w1a2:
0006d0 9a19
0006d1 0000
0006d2 0000
0006d3 9819                      	WS2812b4_WR1
                                 ws2b3_nexta2:
0006d4 0f44                      	lsl a2
0006d5 950a                      	dec	w
0006d6 f789                      	brne ws2b3_starta2
                                 	
0006d7 9508                      ret
                                 
                                 ; ws2812b4_reset	; arg: void; used: r16 (w)
                                 ; purpose: reset pulse, configuration becomes effective
                                 ws2812b4_reset:
0006d8 9819                      	cbi PORTE, 1
0006d9 e401
0006da 2e30
0006db e001
0006dc 943a
0006dd f7f1
0006de 943a
0006df 950a
0006e0 f7d9                      	WAIT_US	50 	; 50 us are required, NO smaller works
                                 .include "lcd.asm"			; include the LCD routines
0006e1 9508                      
                                 ; purpose  LCD HD44780U library
                                 ; ATmega 128 and Atmel Studio 7.0 compliant
                                 
                                 ; === definitions ===
                                 .equ	LCD_IR	= 0x8000	; address LCD instruction reg
                                 .equ	LCD_DR	= 0xc000	; address LCD data register
                                 
                                 ; === subroutines ===
                                 LCD_wr_ir:
                                 ; in	w (byte to write to LCD IR)
0006e2 9030 8000                 	lds	u, LCD_IR		; read IR to check busy flag  (bit7)
0006e4 fc37
0006e5 cffc                      	JB1	u,7,LCD_wr_ir	; Jump if Bit=1 (still busy)
0006e6 d003                      	rcall	lcd_4us		; delay to increment DRAM addr counter
0006e7 9300 8000                 	sts	LCD_IR, w		; store w in IR
0006e9 9508                      	ret
                                 	
                                 lcd_4us:
0006ea d000                      	rcall	lcd_2us		; recursive call		
                                 lcd_2us:
0006eb 0000                      	nop					; rcall(3) + nop(1) + ret(4) = 8 cycles (2us)
0006ec 9508                      	ret
                                 
                                 LCD:
                                 LCD_putc:
0006ed 302d
0006ee f161                      	JK	a0,CR,LCD_cr	; Jump if a0=CR
0006ef 302a
0006f0 f1a1                      	JK	a0,LF,LCD_lf	; Jump if a0=LF
                                 LCD_wr_dr:
                                 ; in	a0 (byte to write to LCD DR)
0006f1 9100 8000                 	lds	w, LCD_IR		; read IR to check busy flag  (bit7)
0006f3 fd07
0006f4 cffc                      	JB1	w,7,LCD_wr_dr	; Jump if Bit=1 (still busy)
0006f5 dff4                      	rcall	lcd_4us		; delay to increment DRAM addr counter
0006f6 9320 c000                 	sts	LCD_DR, a0		; store a0 in DR
0006f8 9508                      	ret	
                                 	
0006f9 e001
0006fa cfe7                      LCD_clear:		JW	LCD_wr_ir, 0b00000001		; clear display
0006fb e002
0006fc cfe5                      LCD_home:		JW	LCD_wr_ir, 0b00000010		; return home
0006fd e100
0006fe cfe3                      LCD_cursor_left:	JW	LCD_wr_ir, 0b00010000	; move cursor to left
0006ff e104
000700 cfe1                      LCD_cursor_right:	JW	LCD_wr_ir, 0b00010100	; move cursor to right
000701 e108
000702 cfdf                      LCD_display_left:	JW	LCD_wr_ir, 0b00011000	; shifts display to left
000703 e10c
000704 cfdd                      LCD_display_right:	JW	LCD_wr_ir, 0b00011100	; shifts display to right
000705 e00d
000706 cfdb                      LCD_blink_on:		JW	LCD_wr_ir, 0b00001101	; Display=1,Cursor=0,Blink=1
000707 e00c
000708 cfd9                      LCD_blink_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
000709 e00e
00070a cfd7                      LCD_cursor_on:		JW	LCD_wr_ir, 0b00001110	; Display=1,Cursor=1,Blink=0
00070b e00c
00070c cfd5                      LCD_cursor_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
                                 		
                                 LCD_init:			
00070d ec00
00070e bf05                      	OUTI MCUCR, (1<<SRE)+(1<<SRW10) ; enable access to ext. SRAM
00070f e001
000710 dfd1                      	CW	LCD_wr_ir, 0b00000001	; clear display
000711 e006
000712 dfcf                      	CW	LCD_wr_ir, 0b00000110	; entry mode set (Inc=1, Shift=0)
000713 e00c
000714 dfcd                      	CW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0	
000715 e308
000716 dfcb                      	CW	LCD_wr_ir, 0b00111000	; 8bits=1, 2lines=1, 5x8dots=0
000717 9508                      	ret
                                 
                                 LCD_pos:
                                 ; in	a0 = position (0x00..0x0f first line, 0x40..0x4f second line)
000718 2f02                      	mov	w,a0
000719 6800                      	ori	w,0b10000000
00071a cfc7                      	rjmp	LCD_wr_ir
                                 	
                                 LCD_cr:
                                 ; moving the cursor to the beginning of the line (carriage return)
00071b 9100 8000                 	lds	w, LCD_IR			; read IR to check busy flag  (bit7)
00071d fd07
00071e cffc                      	JB1	w,7,LCD_cr			; Jump if Bit=1 (still busy)
00071f 7400                      	andi	w,0b01000000	; keep bit6 (begin of line 1/2)
000720 6800                      	ori	w,0b10000000		; write address command
000721 dfc8                      	rcall	lcd_4us			; delay to increment DRAM addr counter
000722 9300 8000                 	sts	LCD_IR,w			; store in IR
000724 9508                      	ret
                                 
                                 LCD_lf:
                                 ; moving the cursor to the beginning of the line 2 (line feed)
000725 932f                      	push	a0				; safeguard a0
000726 e420                      	ldi	a0,$40				; load position $40 (begin of line 2)
000727 dff0                      	rcall	LCD_pos			; set cursor position
000728 912f                      	pop	a0					; restore a0
                                 .include "printf.asm"		; include formatted printing routines
000729 9508                      
                                 ; purpose library, formatted output generation
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 ; v2019.02 20180821 AxS supports SRAM input from 0x0260
                                 ;					through 0x02ff that should be reserved
                                 
                                 ; === description ===
                                 ; 
                                 ; The program "printf" interprets and prints formatted strings.
                                 ; The special formatting characters regognized are:
                                 ;
                                 ; FDEC	decimal number
                                 ; FHEX	hexadecimal number
                                 ; FBIN	binary number
                                 ; FFRAC	fixed fraction number
                                 ; FCHAR	single ASCII character
                                 ; FSTR	zero-terminated ASCII string
                                 ;	
                                 ; The special formatting characters are distinguished from normal 
                                 ; ASCII characters by having their bit7 set to 1.
                                 ;
                                 ; Signification of bit fields:
                                 ;
                                 ; b 	bytes		1..4 b bytes		2
                                 ; s 	sign		0(unsigned), 1(signed)	1
                                 ; i		integer digits	
                                 ; e 	base		2,,36			5
                                 ; dp 	dec. point	0..32			5
                                 ; $if	i=integer digits,  0=all digits,  1..15 digits 
                                 ;		f=fraction digits, 0=no fraction, 1..15 digits
                                 ;
                                 ; Formatting characters must be followed by an SRAM address (0..ff)
                                 ; that determines the origin of variables that must be printed (if any)
                                 ; FBIN,	sram
                                 ; FHEX,	sram
                                 ; FDEC,	sram
                                 ; FCHAR,sram
                                 ; FSTR,	sram
                                 ;
                                 ; The address 'sram' is a 1-byte constant. It addresses
                                 ; 	 0..1f	registers r0..r31, 
                                 ; 	20..3f	i/o ports, (need to be addressed with an offset of $20)
                                 ;	0x0260..0x02ff	SRAM
                                 ; Variables can be located into register and I/0s, and can also
                                 ; be stored into data SRAM at locations 0x0200 through 0x02ff. Any
                                 ; sram address higher than 0x0060 is assumed to be at (0x0260+address)
                                 ; from automatic address detection in _printf_formatted: and subsequent
                                 ; assignment to xh; xl keeps its value. Consequently, variables that are
                                 ; to be stored into SRAM and further printed by fprint must reside at
                                 ; 0x0200 up to 0x02ff, and must be addressed using a label. Usage: see
                                 ; file string1.asm, for example.
                                 
                                 ; The FFRAC formatting character must be followed by 
                                 ;	ONE sram address and 
                                 ;	TWO more formatting characters
                                 ; FFRAC,sram,dp,$if
                                 
                                 ; dp	decimal point position, 0=right, 32=left
                                 ; $if	format i.f, i=integer digits, f=fraction digits
                                 
                                 ; The special formatting characters use the following coding
                                 ;
                                 ; FDEC	11bb'iiis	i=0 all digits, i=1-7 digits
                                 ; FBIN	101i'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FHEX	1001'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 ; FREP	1000'0110
                                 ; FFUNC	1000'0111
                                 ;	1000'0010
                                 ;	1000'0011
                                 ; FESC	1000'0000
                                 
                                 ; examples
                                 ; formatting string			printing
                                 ; "a=",FDEC,a,0				1-byte variable a, unsigned decimal
                                 ; "a=",FDEC2,a,0			2-byte variable a (a1,a0), unsigend
                                 ; "a=",FDEC|FSIGN,a,0		1-byte variable 1, signed decimal
                                 ; "n=",FBIN,PIND+$20,0		i/o port, binary, notice offset of $20
                                 ; "f=",FFRAC4|FSIGN,a,16,$88,0	4-byte signed fixed-point fraction
                                 ;				dec.point at 16, 8 int.digits, 8 frac.digits	
                                 ; "f=",FFRAC2,a,16,$18,0		2-byte unsigned fixed-point fraction
                                 ;				dec.point at 16, 1 int.digits, 8 frac.digits	
                                 ; "a=",FDEC|FDIG5|FSIGN,a,0	1-byte variable, 5-digit, decimal, signed
                                 ; "a=",FDEC|FDIG5,a,0		1-byte variable, 5-digit, decimal, unsigned
                                 
                                 ; === registers modified ===
                                 ; e0,e1	used to transmit address of putc routine
                                 ; zh,zl	used as pointer to prog-memory
                                 
                                 ; === constants ==============================================
                                 
                                 .equ	FDEC	= 0b11000000	; 1-byte variable
                                 .equ	FDEC2	= 0b11010000	; 2-byte variable
                                 .equ	FDEC3	= 0b11100000	; 3-byte variable
                                 .equ	FDEC4	= 0b11110000	; 4-byte variable
                                 
                                 .equ	FBIN	= 0b10100000
                                 .equ	FHEX	= 0b10010100	; 1-byte variable
                                 .equ	FHEX2	= 0b10011000	; 2-byte variable
                                 .equ	FHEX3	= 0b10011100	; 3-byte variable
                                 .equ	FHEX4	= 0b10010000	; 4-byte variable
                                 
                                 .equ	FFRAC	= 0b10001000	; 1-byte variable
                                 .equ	FFRAC2	= 0b10001010	; 2-byte variable
                                 .equ	FFRAC3	= 0b10001100	; 3-byte variable
                                 .equ	FFRAC4	= 0b10001110	; 4-byte variable
                                 
                                 .equ	FCHAR	= 0b10000100
                                 .equ	FSTR	= 0b10000101
                                 
                                 .equ	FSIGN	= 0b00000001
                                 
                                 .equ	FDIG1	= 1<<1
                                 .equ	FDIG2	= 2<<1
                                 .equ	FDIG3	= 3<<1	
                                 .equ	FDIG4	= 4<<1
                                 .equ	FDIG5	= 5<<1
                                 .equ	FDIG6	= 6<<1
                                 .equ	FDIG7	= 7<<1
                                 
                                 ; ===macro ====================================================
                                 
                                 .macro	PRINTF			; putc function (UART, LCD...)
                                 	ldi	w, low(@0)		; address of "putc" in e1:d0
                                 	mov	e0,w
                                 	ldi	w,high(@0)
                                 	mov	e1,w
                                 	rcall	_printf
                                 	.endmacro
                                 
                                 ; mod	y,z
                                 
                                 
                                 ; === routines ================================================
                                 
                                 _printf:
00072a 91ff
00072b 91ef                      	POPZ			; z points to begin of "string"
00072c 0fee
00072d 1fff                      	MUL2Z			; multiply Z by two, (word ptr -> byte ptr)
00072e 93af
00072f 93bf                      	PUSHX
                                 		
                                 _printf_read:
000730 95c8                      	lpm				; places prog_mem(Z) into r0 (=c)
000731 9631                      	adiw	zl,1	; increment pointer Z
000732 2000                      	tst	r0			; test for ZERO (=end of string)
000733 f021                      	breq	_printf_end	; char=0 indicates end of ascii string
000734 f04a                      	brmi	_printf_formatted ; bit7=1 indicates formatting character
000735 2d00                      	mov	w,r0
000736 d017                      	rcall	_putw	; display the character
000737 cff8                      	rjmp	_printf_read	; read next character in the string
                                 	
                                 _printf_end:
000738 9631                      	adiw	zl,1	; point to the next character
000739 95f6
00073a 95e7                      	DIV2Z			; divide by 2 (byte ptr -> word ptr)
00073b 91bf
00073c 91af                      	POPX
00073d 9409                      	ijmp			; return to instruction after "string"
                                 
                                 _printf_formatted:
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 
00073e fa00                      	bst	r0,0		; store sign in T
00073f 2d00                      	mov	w,r0		; store formatting character in w
000740 95c8                      	lpm	
000741 2da0                      	mov	xl,r0		; load x-pointer with SRAM address
000742 36a0                      	cpi	xl,0x60
000743 f010                      	brlo rio_space
                                 dataram_space:		; variable originates from SRAM memory
000744 e0b2                      	ldi	xh,0x02		;>addresses are limited to 0x0260 through 0x02ff
000745 c001                      	rjmp space_detect_end	;>that enables automatic detection of the origin
                                 rio_space:			; variable originates from reg or I/O space 
000746 27bb                      	clr	xh			; clear high-byte, addresses are 0x0000 through 0x003f (0x005f)
                                 space_detect_end:
000747 9631                       	adiw	zl,1	; increment pointer Z
                                 
                                 ;	JB1	w,6,_putdec
                                 ;	JB1	w,5,_putbin
                                 ;	JB1	w,4,_puthex
                                 ;	JB1	w,3,_putfrac
000748 3804
000749 f079                      	JK	w,FCHAR,_putchar
00074a 3805
00074b f081                      	JK	w,FSTR ,_putstr
00074c c015                      	rjmp	_putnum
                                 	
00074d cfe2                      	rjmp	_printf_read	
                                 
                                 ; === putc (put character) ===============================
                                 ; in	w	character to put
                                 ;	e1,e0	address of output routine (UART, LCD putc)
                                 _putw:
00074e 932f
00074f 93ff
000750 93ef                      	PUSH3	a0,zh,zl
000751 2de4
000752 2df5
000753 2f20                      	MOV3	a0,zh,zl, w,e1,e0
000754 9509                      	icall			; indirect call to "putc"
000755 91ef
000756 91ff
000757 912f                      	POP3	a0,zh,zl
000758 9508                      	ret
                                 
                                 ; === putchar (put character) ============================
                                 ; in	x	pointer to character to put
                                 _putchar:
000759 910c                      	ld	w,x
00075a dff3                      	rcall	_putw
00075b cfd4                      	rjmp	_printf_read
                                 	
                                 ; === putstr (put string) ================================
                                 ; in	x	pointer to ascii string
                                 ;	b3,b2	address of output routine (UART, LCD putc)
                                 _putstr:
00075c 910d                      	ld	w,x+
00075d 2300                      	tst	w
00075e f409                      	brne	PC+2
00075f cfd0                      	rjmp	_printf_read
000760 dfed                      	rcall	_putw
000761 cffa                      	rjmp	_putstr
                                 
                                 ; === putnum (dec/bin/hex/frac) ===========================
                                 ; in	x	pointer to SRAM variable to print
                                 ; 	r0	formatting character
                                 	
                                 _putnum:
000762 935f
000763 934f
000764 933f
000765 932f                      	PUSH4	a3,a2,a1,a0	; safeguard a
000766 939f
000767 938f
000768 937f
000769 936f                      	PUSH4	b3,b2,b1,b0	; safeguard b	
00076a 912d
00076b 913d
00076c 914d
00076d 915d                      	LDX4	a3,a2,a1,a0	; load operand to print into a
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FRACT	1000'1bbs
                                 
00076e fd06
00076f c006                      	JB1	w,6,_putdec
000770 fd05
000771 c00f                      	JB1	w,5,_putbin
000772 fd04
000773 c010                      	JB1	w,4,_puthex
000774 fd03
000775 c019                      	JB1	w,3,_putfrac
                                 
                                 ; FDEC	11bb'iiis
                                 _putdec:
000776 e06a                      	ldi	b0,10		; b0 = base (10)
                                 
000777 2f70                      	mov	b1,w
000778 9576                      	lsr	b1
000779 7077                      	andi	b1,0b111	
00077a 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
00077b e080                      	ldi	b2,0		; b2 = dec. point position = 0 (right)
                                 	
00077c 2f90                      	mov	b3,w
00077d 9592                      	swap	b3
00077e 7093                      	andi	b3,0b11
00077f 9593                      	inc	b3			; b3 = number of bytes (1..4)
000780 c01a                      	rjmp	_getnum	; get number of digits (iii)
                                 
                                 ; FBIN	101i'iiis	addr
                                 _putbin:	
000781 e062                      	ldi	b0,2		; b0 = base (2)
000782 e094                      	ldi	b3,4		; b3 = number of bytes (4)	
000783 c003                      	rjmp	_getdig	; get number of digits (iii)
                                 
                                 ; FHEX	1001'iiis	addr
                                 _puthex:	
000784 e160                      	ldi	b0,16		; b0 = base (16)
000785 e094                      	ldi	b3,4		; b3 = number of bytes (4)
000786 c000                      	rjmp	_getdig
                                 
                                 _getdig:
000787 2f70                      	mov	b1,w
000788 9576                      	lsr	b1
000789 7077                      	andi	b1,0b111
00078a f409                      	brne	PC+2
00078b e078                      	ldi	b1,8		; if b1=0 then 8-digits
00078c 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
00078d e080                      	ldi	b2, 0		; b2 = dec. point position = 0 (right)
00078e c00c                      	rjmp	_getnum
                                 
                                 ; FFRAC	1000'1bbs	addr	 00dd'dddd, 	iiii'ffff
                                 	
                                 _putfrac:
00078f e06a                      	ldi	b0,10		; base=10	
000790 95c8                      	lpm
000791 2d80                      	mov	b2,r0		; load dec.point position
000792 9631                      	adiw	zl,1	; increment char pointer
000793 95c8                      	lpm
000794 2d70                      	mov	b1,r0		; load ii.ff format
000795 9631                      	adiw	zl,1	; increment char pointer
                                 	
000796 2f90                      	mov	b3,w
000797 9595                      	asr	b3
000798 7093                      	andi	b3,0b11
000799 9593                      	inc	b3			; b3 = number of bytes (1..4)
                                 
00079a c000                      	rjmp	_getnum
                                 
                                 _getnum:
                                 ; in 	a	4-byte variable
                                 ; 	b3	number of bytes (1..4)
                                 ;	T	sign, 0=unsigned, 1=signed
                                 
00079b 3094
00079c f081                      	JK	b3,4,_printf_4b
00079d 3093
00079e f051                      	JK	b3,3,_printf_3b
00079f 3092
0007a0 f021                      	JK	b3,2,_printf_2b	
                                 	
                                 _printf_1b:			; sign extension
0007a1 2733                      	clr	a1
0007a2 f416                      	brtc	PC+3	; T=1 sign extension
0007a3 fd27                      	sbrc	a0,7
0007a4 ef3f                      	ldi	a1,0xff
                                 _printf_2b:
0007a5 2744                      	clr	a2
0007a6 f416                      	brtc	PC+3	; T=1 sign extension	
0007a7 fd37                      	sbrc	a1,7
0007a8 ef4f                      	ldi	a2,0xff
                                 _printf_3b:	
0007a9 2755                      	clr	a3
0007aa f416                      	brtc	PC+3	; T=1 sign extension
0007ab fd47                      	sbrc	a2,7
0007ac ef5f                      	ldi	a3,0xff
                                 _printf_4b:
                                 
0007ad d009                      	rcall	_ftoa		; float to ascii
0007ae 916f
0007af 917f
0007b0 918f
0007b1 919f                      	POP4	b3,b2,b1,b0	; restore b
0007b2 912f
0007b3 913f
0007b4 914f
0007b5 915f                      	POP4	a3,a2,a1,a0	; restore a
                                 	
0007b6 cf79                      	rjmp	_printf_read
                                 
                                 ; ===============================================
                                 ; func	ftoa
                                 ; converts a fixed-point fractional number to an ascii string
                                 ; author (c) Raphael Holzer
                                 ;
                                 ; in	a3-a0	variable to print
                                 ;	b0	base, 2 to 36, but usually decimal (10)
                                 ;	b1	number of digits to print ii.ff
                                 ; 	b2	position of the decimal point (0=right, 32=left)
                                 ;	T	sign (T=0 unsiged, T=1 signed)
                                 
                                 _ftoa:
0007b7 92cf                      	push	d0
0007b8 92bf
0007b9 92af
0007ba 929f
0007bb 928f                      	PUSH4	c3,c2,c1,c0	; c = fraction part, a = integer part
0007bc 18bb
0007bd 24aa
0007be 2499
0007bf 2488                      	CLR4	c3,c2,c1,c0	; clear fraction part
                                 
0007c0 f486                      	brtc	_ftoa_plus	; if T=0 then unsigned
0007c1 94e8                      	clt
0007c2 2355                      	tst	a3				; if MSb(a)=1 then a=-a
0007c3 f46a                      	brpl	_ftoa_plus
0007c4 9468                      	set					; T=1 (minus)
0007c5 2377                      	tst	b1
0007c6 f009                      	breq	PC+2		; if b1=0 the print ALL digits
0007c7 5170                      	subi	b1,0x10		; decrease int digits
0007c8 9550
0007c9 9540
0007ca 9530
0007cb 9520
0007cc ef0f
0007cd 1b20
0007ce 0b30
0007cf 0b40
0007d0 0b50                      	NEG4	a3,a2,a1,a0	; negate a
                                 _ftoa_plus:	
0007d1 2388                      	tst	b2				; b0=0 (only integer part)
0007d2 f051                      	breq	_ftoa_int	
                                 _ftoa_shift:	
0007d3 9555
0007d4 9547
0007d5 9537
0007d6 9527                      	ASR4	a3,a2,a1,a0	; a = integer part	
0007d7 94b7
0007d8 94a7
0007d9 9497
0007da 9487                      	ROR4	c3,c2,c1,c0	; c = fraction part
0007db 958a
0007dc f7b1                      	DJNZ	b2,_ftoa_shift
                                 _ftoa_int:
0007dd 937f                      	push	b1			; ii.ff (ii=int digits)
0007de 9572                      	swap	b1
0007df 707f                      	andi	b1,0x0f
                                 	
0007e0 e20e                      	ldi	w,'.'			; push decimal point
0007e1 930f                      	push	w
                                 _ftoa_int1:
0007e2 d045                      	rcall	_div41		; int=int/10
0007e3 2d0c                      	mov	w,d0			; d=reminder
0007e4 d030                      	rcall	_hex2asc
0007e5 930f                      	push	w			; push rem(int/10)
0007e6 2700
0007e7 1720
0007e8 0730
0007e9 0740
0007ea 0750                      	TST4	a3,a2,a1,a0	; (int/10)=?
0007eb f029                      	breq	_ftoa_space	; (int/10)=0 then finished
0007ec 2377                      	tst	b1
0007ed f3a1                      	breq	_ftoa_int1	; if b1=0 then print ALL int-digits
0007ee 957a
0007ef f791                      	DJNZ	b1,_ftoa_int1
0007f0 c007                      	rjmp	_ftoa_sign
                                 _ftoa_space:
0007f1 2377                      	tst	b1				; if b1=0 then print ALL int-digits
0007f2 f029                      	breq	_ftoa_sign
0007f3 957a                      	dec	b1
0007f4 f019                      	breq	_ftoa_sign
0007f5 e200                      	ldi	w,' '			; write spaces
0007f6 df57                      	rcall	_putw	
0007f7 cff9                      	rjmp	_ftoa_space
                                 _ftoa_sign:
0007f8 f416                      	brtc	PC+3		; if T=1 then write 'minus'
0007f9 e20d                      	ldi	w,'-'
0007fa df53                      	rcall	_putw
                                 _ftoa_int3:
0007fb 910f                      	pop	w
0007fc 320e                      	cpi	w,'.'
0007fd f011                      	breq	PC+3
0007fe df4f                      	rcall	_putw
0007ff cffb                      	rjmp	_ftoa_int3
                                 
000800 917f                      	pop	b1				; ii.ff (ff=frac digits)
000801 707f                      	andi	b1,0x0f
000802 2377                      	tst	b1
000803 f059                      	breq	_ftoa_end
                                 _ftoa_point:	
000804 df49                      	rcall	_putw		; write decimal point
000805 2d28
000806 2d39
000807 2d4a
000808 2d5b                      	MOV4	a3,a2,a1,a0, c3,c2,c1,c0		
                                 _ftoa_frac:
000809 d011                      	rcall	_mul41		; d.frac=10*frac
00080a 2d0c                      	mov	w,d0
00080b d009                      	rcall	_hex2asc
00080c df41                      	rcall	_putw
00080d 957a
00080e f7d1                      	DJNZ	b1,_ftoa_frac
                                 _ftoa_end:
00080f 908f
000810 909f
000811 90af
000812 90bf                      	POP4	c3,c2,c1,c0
000813 90cf                      	pop	d0
000814 9508                      	ret
                                 
                                 ; === hexadecimal to ascii ===
                                 ; in	w
                                 _hex2asc:
000815 300a                      	cpi	w,10
000816 f410                      	brsh	PC+3
000817 5d00                      	addi	w,'0'
000818 9508                      	ret
000819 5a09                      	addi	w,('a'-10)
00081a 9508                      	ret
                                 
                                 ; === multiply 4byte*1byte ===
                                 ; funct mul41
                                 ; multiplies a3-a0 (4-byte) by b0 (1-byte)
                                 ; author (c) Raphael Holzer, EPFL
                                 ; 
                                 ; in	a3..a0	multiplicand (argument to multiply)
                                 ;	b0	multiplier
                                 ; out	a3..a0	result
                                 ; 	d0	result MSB (byte 4)
                                 ;
00081b 24cc                      _mul41:	clr	d0			; clear byte4 of result
00081c e200                      	ldi	w,32			; load bit counter
00081d 9488                      __m41:	clc				; clear carry
00081e fd20                      	sbrc	a0,0		; skip addition if LSB=0
00081f 0ec6                      	add	d0,b0			; add b to MSB of a
000820 94c7
000821 9557
000822 9547
000823 9537
000824 9527                      	ROR5	d0,a3,a2,a1,a0	; shift-right c, LSB (of b) into carry
000825 950a
000826 f7b1                      	DJNZ	w,__m41		; Decrement and Jump if bit-count Not Zero
000827 9508                      	ret
                                 
                                 ; === divide 4byte/1byte ===
                                 ; func div41
                                 ; in	a0..a3 	divident (argument to divide)
                                 ;	b0 	divider
                                 ; out	a0..a3 	result 
                                 ;	d0	reminder
                                 ;
000828 24cc                      _div41:	clr	d0			; d will contain the remainder
000829 e200                      	ldi	w,32			; load bit counter
00082a 1f22
00082b 1f33
00082c 1f44
00082d 1f55
00082e 1ccc                      __d41:	ROL5	d0,a3,a2,a1,a0	; shift carry into result c
00082f 1ac6                      	sub	d0, b0			; subtract b from remainder
000830 f408                      	brcc	PC+2	
000831 0ec6                      	add	d0, b0			; restore if remainder became negative
000832 950a
000833 f7b1                      	DJNZ	w,__d41		; Decrement and Jump if bit-count Not Zero
000834 1f22
000835 1f33
000836 1f44
000837 1f55                      	ROL4	a3,a2,a1,a0	; last shift (carry into result c)
000838 9550
000839 9540
00083a 9530
00083b 9520                      	COM4	a3,a2,a1,a0	; complement result
00083c 9508                      	ret
                                 
                                 	mode_display:
00083d e0e0
00083e e0f4
00083f e400
000840 2e00
000841 9121
000842 9131
000843 9141
000844 94f8
000845 de61
000846 9478
000847 940a
000848 f7c1
000849 de8e                      	DISPLAY
                                 
00084a 2722
00084b 2733
00084c 2744
00084d 2755                      	CLEAR_A
00084e e028                      	ldi a0, 8
00084f 9100 010d                 	lds w, graph_start
000851 1b20                      	sub a0, w
                                 
000852 2766
000853 2777
000854 2788
000855 2799                      	CLEAR_B
000856 9160 010a                 	lds b0, mode
                                 	
                                 
000858 3060                      	cpi b0, 0
000859 f4b1                      	brne show_acc
                                 	show_speed:
00085a ee0d
00085b 2e40
00085c e006
00085d 2e50
00085e decb                      	PRINTF LCD
00085f 0d0d
000860 6c50
000861 746f
000862 3a20
000863 5320
000864 6570
000865 6465
000866 0a20                      	.db CR, CR,   "Plot : Speed ", LF
000867 6853
000868 6669
000869 3a74
00086a 7420
00086b d02d
00086c 2012
00086d 2020
00086e 0020                      	.db "Shift: t-", FDEC2, a, "    ", 0
00086f c015                      	rjmp end_menu_loop
                                 	
                                 	show_acc:
000870 ee0d
000871 2e40
000872 e006
000873 2e50
000874 deb5                      	PRINTF LCD
000875 0d0d
000876 6c50
000877 746f
000878 3a20
000879 4120
00087a 6363
00087b 726c
00087c 0a20                      	.db CR, CR,   "Plot : Acclr ", LF
00087d 6853
00087e 6669
00087f 3a74
000880 7420
000881 d02d
000882 2012
000883 2020
000884 0020                      	.db "Shift: t-", FDEC2, a, "    ", 0
                                 	
                                 	end_menu_loop:
000885 de75                      	rcall LCD_home
000886 9100 0110                 	lds w, break_menu_loop
000888 ff00                      	sbrs w, 0
000889 c878                      	rjmp menu_loop
                                 
                                 	;disable INT0 INT1 INT2		enable INT3
00088a b709                      	in w, EIMSK
00088b 7708                      	andi w, 0b1111000
00088c 6008                      	ori w, 0b00001000
00088d bf09                      	out EIMSK, w
                                 
                                 	;enable timer0
00088e b707                      	in w, TIMSK
00088f 6001                      	ori w,(1<<TOIE0)
000890 bf07                      	out TIMSK, w
                                 
                                 	;reset break_menu_loop and LCD
000891 2700                      	clr w
000892 9300 0110                 	sts break_menu_loop, w
                                 
                                 	;clear graph
000894 2700
000895 9300 0115
000897 9300 0116
000899 9300 0117
00089b 9300 0118
00089d 9300 0119
00089f 9300 011a
0008a1 9300 011b
0008a3 9300 011c
0008a5 9300 011d
0008a7 9300 011e
0008a9 9300 011f
0008ab 9300 0120
0008ad 9300 0121
0008af 9300 0122
0008b1 9300 0123
0008b3 9300 0124
0008b5 9300 0125
0008b7 9300 0126
0008b9 9300 0127
0008bb 9300 0128
0008bd 9300 0129
0008bf 9300 012a
0008c1 9300 012b
0008c3 9300 012c                 	CLEAR_GRAPH
                                 
                                 main:
                                 	;CHECK FOR CHANGE MODE
0008c5 9100 010b                 	lds w, change_mode
0008c7 fd00                      	sbrc w, 0
0008c8 c82c                      	rjmp menu
                                 	
                                 	; PART 2: READ DISTANCE
0008c9 2777
0008ca 9a36
0008cb ff70
0008cc cffe
0008cd b124
0008ce b135                      	READ_DISTANCE
                                 	; ------ 2.3 check if sensor detects something in the valid range
0008cf 3030                      	cpi a1, 0
0008d0 f409                      	brne detect
0008d1 c011                      	rjmp no_detect
                                 detect:
0008d2 9100 010f                 	lds w, hold
0008d4 3001                      	cpi w, 1
0008d5 f409                      	brne inc_counter
                                 	
0008d6 c06d                      	rjmp main_end
                                 
                                 inc_counter:
0008d7 9110 0107                 	lds _w, counter
0008d9 9513                      	inc _w
0008da 9310 0107                 	sts counter, _w
0008dc e001                      	ldi w, 1
0008dd 9300 010f                 	sts hold, w
0008df c064                      	rjmp main_end
                                 
                                 release:
                                 	;---- set hold to zero
0008e0 2700                      	 clr w
0008e1 9300 010f                 	 sts hold, w
                                 
                                 no_detect:
                                 	;reset show_negative_flag
0008e3 2700                      	clr w
0008e4 9300 0112                 	sts show_negative_flag, w
                                 
                                 	;----- check for hold reset
0008e6 9100 010f                 	lds w, hold
0008e8 fd00                      	sbrc w, 0
0008e9 dff6                      	rcall release
                                 
                                 	;write tour/s in b
                                 	load_height:
0008ea 2766
0008eb 2777
0008ec 2788
0008ed 2799                      	CLEAR_B
0008ee 9160 011d                 	lds b0, h8			;load height in b0
                                 
0008f0 3060                      	cpi b0, 0			;check height sign for display
0008f1 f422                      	brpl load_mode		;height positive
                                 	show_negative:		;height negative
0008f2 9561                      	neg b0
0008f3 e001                      	ldi w, 1
0008f4 9300 0112                 	sts show_negative_flag, w
                                 
                                 	load_mode:
0008f6 2722
0008f7 2733
0008f8 2744
0008f9 2755                      	CLEAR_A
0008fa 9120 010a                 	lds a0, mode
                                 				; print formated
0008fc 3020                      	cpi a0, 0
0008fd f029                      	breq speed
                                 
0008fe 9100 0112                 	lds w, show_negative_flag
000900 3001                      	cpi w, 1
000901 f169                      	breq acceleration_negative
000902 c016                      	rjmp acceleration_positive
                                 
                                 	speed:
000903 ee0d
000904 2e40
000905 e006
000906 2e50
000907 de22                      	PRINTF LCD
000908 0d0d
000909 7053
00090a 6565
00090b 3a64
00090c 2020
00090d 2020
00090e 2020
00090f 0a20                      	.db CR, CR,   "Speed:       ", LF
000910 16d0
000911 7420
000912 756f
000913 2f72
000914 2073
000915 2020
000916 2020
000917 0020                      	.db		 FDEC2, b, " tour/s      ", 0
000918 c02b                      	rjmp main_end
                                 	acceleration_positive:
000919 ee0d
00091a 2e40
00091b e006
00091c 2e50
00091d de0c                      	PRINTF LCD
00091e 0d0d
00091f 6341
000920 6563
000921 656c
000922 6172
000923 6974
000924 6e6f
000925 0a3a                      	.db CR, CR,	  "Acceleration:", LF
000926 d020
000927 2016
000928 6f74
000929 7275
00092a 732f
00092b 2032
00092c 2020
00092d 0020                      	.db	" ",	 FDEC2, b, " tour/s2    ", 0
00092e c015                      	rjmp main_end
                                 	acceleration_negative:
00092f ee0d
000930 2e40
000931 e006
000932 2e50
000933 ddf6                      	PRINTF LCD
000934 0d0d
000935 6341
000936 6563
000937 656c
000938 6172
000939 6974
00093a 6e6f
00093b 0a3a                      	.db CR, CR,	  "Acceleration:", LF
00093c d02d
00093d 2016
00093e 6f74
00093f 7275
000940 732f
000941 2032
000942 2020
000943 0020                      	.db "-", FDEC2, b, " tour/s2    ", 0
                                 
                                 main_end:
000944 e0e0
000945 e0f4
000946 9160 011d
000948 9360 010c
00094a 3060
00094b f422
00094c ef0f
00094d 9300 0111
00094f 9561
000950 3063
000951 f438
000952 e02a
000953 9321
000954 e020
000955 9321
000956 e020
000957 9321
000958 c00f
000959 3065
00095a f438
00095b e02e
00095c 9321
00095d e129
00095e 9321
00095f e020
000960 9321
000961 c006
000962 e020
000963 9321
000964 e02a
000965 9321
000966 e020
000967 9321
000968 9100 0111
00096a 3f0f
00096b f421
00096c 9561
00096d 2700
00096e 9300 0111
000970 0000
000971 3060
000972 f102
000973 e006
000974 1b06
000975 f041
000976 e020
000977 9321
000978 e020
000979 9321
00097a e020
00097b 9321
00097c 950a
00097d f7c1
00097e 3060
00097f f089
000980 e020
000981 9321
000982 e020
000983 9321
000984 e02a
000985 9321
000986 3061
000987 f049
000988 956a
000989 e025
00098a 9321
00098b e025
00098c 9321
00098d e025
00098e 9321
00098f 956a
000990 f7c1
000991 0000
000992 c020
000993 9561
000994 e006
000995 1b06
000996 f041
000997 e020
000998 9321
000999 e020
00099a 9321
00099b e020
00099c 9321
00099d 950a
00099e f7c1
00099f 3060
0009a0 f089
0009a1 e020
0009a2 9321
0009a3 e02a
0009a4 9321
0009a5 e020
0009a6 9321
0009a7 3061
0009a8 f049
0009a9 956a
0009aa e025
0009ab 9321
0009ac e025
0009ad 9321
0009ae e025
0009af 9321
0009b0 956a
0009b1 f7c1
0009b2 0000
0009b3 9160 010c
0009b5 3060
0009b6 f422
0009b7 ef0f
0009b8 9300 0111
0009ba 9561
0009bb 3063
0009bc f438
0009bd e02a
0009be 9321
0009bf e020
0009c0 9321
0009c1 e020
0009c2 9321
0009c3 c00f
0009c4 3065
0009c5 f438
0009c6 e02e
0009c7 9321
0009c8 e129
0009c9 9321
0009ca e020
0009cb 9321
0009cc c006
0009cd e020
0009ce 9321
0009cf e02a
0009d0 9321
0009d1 e020
0009d2 9321
0009d3 9100 0111
0009d5 3f0f
0009d6 f421
0009d7 9561
0009d8 2700
0009d9 9300 0111
0009db 0000
0009dc 9160 011e
0009de 9360 010c
0009e0 3060
0009e1 f422
0009e2 ef0f
0009e3 9300 0111
0009e5 9561
0009e6 3063
0009e7 f438
0009e8 e02a
0009e9 9321
0009ea e020
0009eb 9321
0009ec e020
0009ed 9321
0009ee c00f
0009ef 3065
0009f0 f438
0009f1 e02e
0009f2 9321
0009f3 e129
0009f4 9321
0009f5 e020
0009f6 9321
0009f7 c006
0009f8 e020
0009f9 9321
0009fa e02a
0009fb 9321
0009fc e020
0009fd 9321
0009fe 9100 0111
000a00 3f0f
000a01 f421
000a02 9561
000a03 2700
000a04 9300 0111
000a06 0000
000a07 3060
000a08 f102
000a09 e006
000a0a 1b06
000a0b f041
000a0c e020
000a0d 9321
000a0e e020
000a0f 9321
000a10 e020
000a11 9321
000a12 950a
000a13 f7c1
000a14 3060
000a15 f089
000a16 e020
000a17 9321
000a18 e020
000a19 9321
000a1a e02a
000a1b 9321
000a1c 3061
000a1d f049
000a1e 956a
000a1f e025
000a20 9321
000a21 e025
000a22 9321
000a23 e025
000a24 9321
000a25 956a
000a26 f7c1
000a27 0000
000a28 c020
000a29 9561
000a2a e006
000a2b 1b06
000a2c f041
000a2d e020
000a2e 9321
000a2f e020
000a30 9321
000a31 e020
000a32 9321
000a33 950a
000a34 f7c1
000a35 3060
000a36 f089
000a37 e020
000a38 9321
000a39 e02a
000a3a 9321
000a3b e020
000a3c 9321
000a3d 3061
000a3e f049
000a3f 956a
000a40 e025
000a41 9321
000a42 e025
000a43 9321
000a44 e025
000a45 9321
000a46 956a
000a47 f7c1
000a48 0000
000a49 9160 010c
000a4b 3060
000a4c f422
000a4d ef0f
000a4e 9300 0111
000a50 9561
000a51 3063
000a52 f438
000a53 e02a
000a54 9321
000a55 e020
000a56 9321
000a57 e020
000a58 9321
000a59 c00f
000a5a 3065
000a5b f438
000a5c e02e
000a5d 9321
000a5e e129
000a5f 9321
000a60 e020
000a61 9321
000a62 c006
000a63 e020
000a64 9321
000a65 e02a
000a66 9321
000a67 e020
000a68 9321
000a69 9100 0111
000a6b 3f0f
000a6c f421
000a6d 9561
000a6e 2700
000a6f 9300 0111
000a71 0000
000a72 9160 011f
000a74 9360 010c
000a76 3060
000a77 f422
000a78 ef0f
000a79 9300 0111
000a7b 9561
000a7c 3063
000a7d f438
000a7e e02a
000a7f 9321
000a80 e020
000a81 9321
000a82 e020
000a83 9321
000a84 c00f
000a85 3065
000a86 f438
000a87 e02e
000a88 9321
000a89 e129
000a8a 9321
000a8b e020
000a8c 9321
000a8d c006
000a8e e020
000a8f 9321
000a90 e02a
000a91 9321
000a92 e020
000a93 9321
000a94 9100 0111
000a96 3f0f
000a97 f421
000a98 9561
000a99 2700
000a9a 9300 0111
000a9c 0000
000a9d 3060
000a9e f102
000a9f e006
000aa0 1b06
000aa1 f041
000aa2 e020
000aa3 9321
000aa4 e020
000aa5 9321
000aa6 e020
000aa7 9321
000aa8 950a
000aa9 f7c1
000aaa 3060
000aab f089
000aac e020
000aad 9321
000aae e020
000aaf 9321
000ab0 e02a
000ab1 9321
000ab2 3061
000ab3 f049
000ab4 956a
000ab5 e025
000ab6 9321
000ab7 e025
000ab8 9321
000ab9 e025
000aba 9321
000abb 956a
000abc f7c1
000abd 0000
000abe c020
000abf 9561
000ac0 e006
000ac1 1b06
000ac2 f041
000ac3 e020
000ac4 9321
000ac5 e020
000ac6 9321
000ac7 e020
000ac8 9321
000ac9 950a
000aca f7c1
000acb 3060
000acc f089
000acd e020
000ace 9321
000acf e02a
000ad0 9321
000ad1 e020
000ad2 9321
000ad3 3061
000ad4 f049
000ad5 956a
000ad6 e025
000ad7 9321
000ad8 e025
000ad9 9321
000ada e025
000adb 9321
000adc 956a
000add f7c1
000ade 0000
000adf 9160 010c
000ae1 3060
000ae2 f422
000ae3 ef0f
000ae4 9300 0111
000ae6 9561
000ae7 3063
000ae8 f438
000ae9 e02a
000aea 9321
000aeb e020
000aec 9321
000aed e020
000aee 9321
000aef c00f
000af0 3065
000af1 f438
000af2 e02e
000af3 9321
000af4 e129
000af5 9321
000af6 e020
000af7 9321
000af8 c006
000af9 e020
000afa 9321
000afb e02a
000afc 9321
000afd e020
000afe 9321
000aff 9100 0111
000b01 3f0f
000b02 f421
000b03 9561
000b04 2700
000b05 9300 0111
000b07 0000
000b08 9160 0120
000b0a 9360 010c
000b0c 3060
000b0d f422
000b0e ef0f
000b0f 9300 0111
000b11 9561
000b12 3063
000b13 f438
000b14 e02a
000b15 9321
000b16 e020
000b17 9321
000b18 e020
000b19 9321
000b1a c00f
000b1b 3065
000b1c f438
000b1d e02e
000b1e 9321
000b1f e129
000b20 9321
000b21 e020
000b22 9321
000b23 c006
000b24 e020
000b25 9321
000b26 e02a
000b27 9321
000b28 e020
000b29 9321
000b2a 9100 0111
000b2c 3f0f
000b2d f421
000b2e 9561
000b2f 2700
000b30 9300 0111
000b32 0000
000b33 3060
000b34 f102
000b35 e006
000b36 1b06
000b37 f041
000b38 e020
000b39 9321
000b3a e020
000b3b 9321
000b3c e020
000b3d 9321
000b3e 950a
000b3f f7c1
000b40 3060
000b41 f089
000b42 e020
000b43 9321
000b44 e020
000b45 9321
000b46 e02a
000b47 9321
000b48 3061
000b49 f049
000b4a 956a
000b4b e025
000b4c 9321
000b4d e025
000b4e 9321
000b4f e025
000b50 9321
000b51 956a
000b52 f7c1
000b53 0000
000b54 c020
000b55 9561
000b56 e006
000b57 1b06
000b58 f041
000b59 e020
000b5a 9321
000b5b e020
000b5c 9321
000b5d e020
000b5e 9321
000b5f 950a
000b60 f7c1
000b61 3060
000b62 f089
000b63 e020
000b64 9321
000b65 e02a
000b66 9321
000b67 e020
000b68 9321
000b69 3061
000b6a f049
000b6b 956a
000b6c e025
000b6d 9321
000b6e e025
000b6f 9321
000b70 e025
000b71 9321
000b72 956a
000b73 f7c1
000b74 0000
000b75 9160 010c
000b77 3060
000b78 f422
000b79 ef0f
000b7a 9300 0111
000b7c 9561
000b7d 3063
000b7e f438
000b7f e02a
000b80 9321
000b81 e020
000b82 9321
000b83 e020
000b84 9321
000b85 c00f
000b86 3065
000b87 f438
000b88 e02e
000b89 9321
000b8a e129
000b8b 9321
000b8c e020
000b8d 9321
000b8e c006
000b8f e020
000b90 9321
000b91 e02a
000b92 9321
000b93 e020
000b94 9321
000b95 9100 0111
000b97 3f0f
000b98 f421
000b99 9561
000b9a 2700
000b9b 9300 0111
000b9d 0000
000b9e 9160 0121
000ba0 9360 010c
000ba2 3060
000ba3 f422
000ba4 ef0f
000ba5 9300 0111
000ba7 9561
000ba8 3063
000ba9 f438
000baa e02a
000bab 9321
000bac e020
000bad 9321
000bae e020
000baf 9321
000bb0 c00f
000bb1 3065
000bb2 f438
000bb3 e02e
000bb4 9321
000bb5 e129
000bb6 9321
000bb7 e020
000bb8 9321
000bb9 c006
000bba e020
000bbb 9321
000bbc e02a
000bbd 9321
000bbe e020
000bbf 9321
000bc0 9100 0111
000bc2 3f0f
000bc3 f421
000bc4 9561
000bc5 2700
000bc6 9300 0111
000bc8 0000
000bc9 3060
000bca f102
000bcb e006
000bcc 1b06
000bcd f041
000bce e020
000bcf 9321
000bd0 e020
000bd1 9321
000bd2 e020
000bd3 9321
000bd4 950a
000bd5 f7c1
000bd6 3060
000bd7 f089
000bd8 e020
000bd9 9321
000bda e020
000bdb 9321
000bdc e02a
000bdd 9321
000bde 3061
000bdf f049
000be0 956a
000be1 e025
000be2 9321
000be3 e025
000be4 9321
000be5 e025
000be6 9321
000be7 956a
000be8 f7c1
000be9 0000
000bea c020
000beb 9561
000bec e006
000bed 1b06
000bee f041
000bef e020
000bf0 9321
000bf1 e020
000bf2 9321
000bf3 e020
000bf4 9321
000bf5 950a
000bf6 f7c1
000bf7 3060
000bf8 f089
000bf9 e020
000bfa 9321
000bfb e02a
000bfc 9321
000bfd e020
000bfe 9321
000bff 3061
000c00 f049
000c01 956a
000c02 e025
000c03 9321
000c04 e025
000c05 9321
000c06 e025
000c07 9321
000c08 956a
000c09 f7c1
000c0a 0000
000c0b 9160 010c
000c0d 3060
000c0e f422
000c0f ef0f
000c10 9300 0111
000c12 9561
000c13 3063
000c14 f438
000c15 e02a
000c16 9321
000c17 e020
000c18 9321
000c19 e020
000c1a 9321
000c1b c00f
000c1c 3065
000c1d f438
000c1e e02e
000c1f 9321
000c20 e129
000c21 9321
000c22 e020
000c23 9321
000c24 c006
000c25 e020
000c26 9321
000c27 e02a
000c28 9321
000c29 e020
000c2a 9321
000c2b 9100 0111
000c2d 3f0f
000c2e f421
000c2f 9561
000c30 2700
000c31 9300 0111
000c33 0000
000c34 9160 0122
000c36 9360 010c
000c38 3060
000c39 f422
000c3a ef0f
000c3b 9300 0111
000c3d 9561
000c3e 3063
000c3f f438
000c40 e02a
000c41 9321
000c42 e020
000c43 9321
000c44 e020
000c45 9321
000c46 c00f
000c47 3065
000c48 f438
000c49 e02e
000c4a 9321
000c4b e129
000c4c 9321
000c4d e020
000c4e 9321
000c4f c006
000c50 e020
000c51 9321
000c52 e02a
000c53 9321
000c54 e020
000c55 9321
000c56 9100 0111
000c58 3f0f
000c59 f421
000c5a 9561
000c5b 2700
000c5c 9300 0111
000c5e 0000
000c5f 3060
000c60 f102
000c61 e006
000c62 1b06
000c63 f041
000c64 e020
000c65 9321
000c66 e020
000c67 9321
000c68 e020
000c69 9321
000c6a 950a
000c6b f7c1
000c6c 3060
000c6d f089
000c6e e020
000c6f 9321
000c70 e020
000c71 9321
000c72 e02a
000c73 9321
000c74 3061
000c75 f049
000c76 956a
000c77 e025
000c78 9321
000c79 e025
000c7a 9321
000c7b e025
000c7c 9321
000c7d 956a
000c7e f7c1
000c7f 0000
000c80 c020
000c81 9561
000c82 e006
000c83 1b06
000c84 f041
000c85 e020
000c86 9321
000c87 e020
000c88 9321
000c89 e020
000c8a 9321
000c8b 950a
000c8c f7c1
000c8d 3060
000c8e f089
000c8f e020
000c90 9321
000c91 e02a
000c92 9321
000c93 e020
000c94 9321
000c95 3061
000c96 f049
000c97 956a
000c98 e025
000c99 9321
000c9a e025
000c9b 9321
000c9c e025
000c9d 9321
000c9e 956a
000c9f f7c1
000ca0 0000
000ca1 9160 010c
000ca3 3060
000ca4 f422
000ca5 ef0f
000ca6 9300 0111
000ca8 9561
000ca9 3063
000caa f438
000cab e02a
000cac 9321
000cad e020
000cae 9321
000caf e020
000cb0 9321
000cb1 c00f
000cb2 3065
000cb3 f438
000cb4 e02e
000cb5 9321
000cb6 e129
000cb7 9321
000cb8 e020
000cb9 9321
000cba c006
000cbb e020
000cbc 9321
000cbd e02a
000cbe 9321
000cbf e020
000cc0 9321
000cc1 9100 0111
000cc3 3f0f
000cc4 f421
000cc5 9561
000cc6 2700
000cc7 9300 0111
000cc9 0000
000cca 9160 0123
000ccc 9360 010c
000cce 3060
000ccf f422
000cd0 ef0f
000cd1 9300 0111
000cd3 9561
000cd4 3063
000cd5 f438
000cd6 e02a
000cd7 9321
000cd8 e020
000cd9 9321
000cda e020
000cdb 9321
000cdc c00f
000cdd 3065
000cde f438
000cdf e02e
000ce0 9321
000ce1 e129
000ce2 9321
000ce3 e020
000ce4 9321
000ce5 c006
000ce6 e020
000ce7 9321
000ce8 e02a
000ce9 9321
000cea e020
000ceb 9321
000cec 9100 0111
000cee 3f0f
000cef f421
000cf0 9561
000cf1 2700
000cf2 9300 0111
000cf4 0000
000cf5 3060
000cf6 f102
000cf7 e006
000cf8 1b06
000cf9 f041
000cfa e020
000cfb 9321
000cfc e020
000cfd 9321
000cfe e020
000cff 9321
000d00 950a
000d01 f7c1
000d02 3060
000d03 f089
000d04 e020
000d05 9321
000d06 e020
000d07 9321
000d08 e02a
000d09 9321
000d0a 3061
000d0b f049
000d0c 956a
000d0d e025
000d0e 9321
000d0f e025
000d10 9321
000d11 e025
000d12 9321
000d13 956a
000d14 f7c1
000d15 0000
000d16 c020
000d17 9561
000d18 e006
000d19 1b06
000d1a f041
000d1b e020
000d1c 9321
000d1d e020
000d1e 9321
000d1f e020
000d20 9321
000d21 950a
000d22 f7c1
000d23 3060
000d24 f089
000d25 e020
000d26 9321
000d27 e02a
000d28 9321
000d29 e020
000d2a 9321
000d2b 3061
000d2c f049
000d2d 956a
000d2e e025
000d2f 9321
000d30 e025
000d31 9321
000d32 e025
000d33 9321
000d34 956a
000d35 f7c1
000d36 0000
000d37 9160 010c
000d39 3060
000d3a f422
000d3b ef0f
000d3c 9300 0111
000d3e 9561
000d3f 3063
000d40 f438
000d41 e02a
000d42 9321
000d43 e020
000d44 9321
000d45 e020
000d46 9321
000d47 c00f
000d48 3065
000d49 f438
000d4a e02e
000d4b 9321
000d4c e129
000d4d 9321
000d4e e020
000d4f 9321
000d50 c006
000d51 e020
000d52 9321
000d53 e02a
000d54 9321
000d55 e020
000d56 9321
000d57 9100 0111
000d59 3f0f
000d5a f421
000d5b 9561
000d5c 2700
000d5d 9300 0111
000d5f 0000
000d60 9160 0124
000d62 9360 010c
000d64 3060
000d65 f422
000d66 ef0f
000d67 9300 0111
000d69 9561
000d6a 3063
000d6b f438
000d6c e02a
000d6d 9321
000d6e e020
000d6f 9321
000d70 e020
000d71 9321
000d72 c00f
000d73 3065
000d74 f438
000d75 e02e
000d76 9321
000d77 e129
000d78 9321
000d79 e020
000d7a 9321
000d7b c006
000d7c e020
000d7d 9321
000d7e e02a
000d7f 9321
000d80 e020
000d81 9321
000d82 9100 0111
000d84 3f0f
000d85 f421
000d86 9561
000d87 2700
000d88 9300 0111
000d8a 0000
000d8b 3060
000d8c f102
000d8d e006
000d8e 1b06
000d8f f041
000d90 e020
000d91 9321
000d92 e020
000d93 9321
000d94 e020
000d95 9321
000d96 950a
000d97 f7c1
000d98 3060
000d99 f089
000d9a e020
000d9b 9321
000d9c e020
000d9d 9321
000d9e e02a
000d9f 9321
000da0 3061
000da1 f049
000da2 956a
000da3 e025
000da4 9321
000da5 e025
000da6 9321
000da7 e025
000da8 9321
000da9 956a
000daa f7c1
000dab 0000
000dac c020
000dad 9561
000dae e006
000daf 1b06
000db0 f041
000db1 e020
000db2 9321
000db3 e020
000db4 9321
000db5 e020
000db6 9321
000db7 950a
000db8 f7c1
000db9 3060
000dba f089
000dbb e020
000dbc 9321
000dbd e02a
000dbe 9321
000dbf e020
000dc0 9321
000dc1 3061
000dc2 f049
000dc3 956a
000dc4 e025
000dc5 9321
000dc6 e025
000dc7 9321
000dc8 e025
000dc9 9321
000dca 956a
000dcb f7c1
000dcc 0000
000dcd 9160 010c
000dcf 3060
000dd0 f422
000dd1 ef0f
000dd2 9300 0111
000dd4 9561
000dd5 3063
000dd6 f438
000dd7 e02a
000dd8 9321
000dd9 e020
000dda 9321
000ddb e020
000ddc 9321
000ddd c00f
000dde 3065
000ddf f438
000de0 e02e
000de1 9321
000de2 e129
000de3 9321
000de4 e020
000de5 9321
000de6 c006
000de7 e020
000de8 9321
000de9 e02a
000dea 9321
000deb e020
000dec 9321
000ded 9100 0111
000def 3f0f
000df0 f421
000df1 9561
000df2 2700
000df3 9300 0111
000df5 0000                      	DRAW_GRAPH
000df6 e0e0
000df7 e0f4
000df8 e400
000df9 2e00
000dfa 9121
000dfb 9131
000dfc 9141
000dfd 94f8
000dfe d8a8
000dff 9478
000e00 940a
000e01 f7c1
000e02 d8d5                      	DISPLAY
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   6 y  :   0 z  : 582 r0 :  11 r1 :   2 r2 :   5 r3 :  18 r4 :   6 
r5 :   6 r6 :   0 r7 :   0 r8 :   5 r9 :   5 r10:   5 r11:   6 r12:  11 
r13:   0 r14:   0 r15:   0 r16: 605 r17:  64 r18:1187 r19:  23 r20:  21 
r21:  17 r22: 426 r23:  30 r24:   9 r25:  17 r26:   4 r27:   4 r28:   0 
r29:   0 r30:  15 r31:  10 
Registers used: 27 out of 35 (77.1%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   5 and   :   0 
andi  :  12 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  : 116 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :  17 
brne  : 120 brpl  :  34 brsh  :  65 brtc  :   5 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 call  :   0 cbi   :   4 cbr   :   0 
clc   :   1 clh   :   0 cli   :   2 cln   :   0 clr   :  72 cls   :   0 
clt   :   2 clv   :   0 clz   :   3 com   :   8 cp    :   2 cpc   :   3 
cpi   : 229 cpse  :   0 dec   : 116 elpm  :   0 eor   :   1 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   1 in    :  10 inc   :   6 
jmp   :   8 ld    :  12 ldd   :   0 ldi   : 722 lds   : 150 lpm   :  12 
lsl   :   4 lsr   :   3 mov   :  34 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :  81 nop   :  77 or    :   0 ori   :   6 out   :  19 
pop   :  25 push  :  24 rcall :  44 ret   :  25 reti  :   6 rjmp  : 142 
rol   :  10 ror   :  13 sbc   :   3 sbci  :   0 sbi   :   7 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :  22 sbrs  :   7 sec   :   0 
seh   :   0 sei   :   3 sen   :   0 ser   :   2 ses   :   0 set   :   2 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    : 576 std   :   0 
sts   : 194 sub   :  37 subi  :   5 swap  :   4 tst   :   8 wdr   :   0 

Instructions used: 63 out of 114 (55.3%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c0a   6950    160   7110  131072   5.4%
[.dseg] 0x000100 0x00012e      0     46     46    4096   1.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
